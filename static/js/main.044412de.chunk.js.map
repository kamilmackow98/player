{"version":3,"sources":["components/RightPane.tsx","components/LeftPane.tsx","components/Playbar.tsx","components/Navbar.tsx","App.tsx","serviceWorker.ts","index.tsx","images/unknown.png"],"names":["RightPane","props","className","data-album","onDoubleClick","e","hideUnknownUl","src","unknown","alt","API_SEARCH","API_KEY","API_LYRICS","ContentCollection","id","LeftPane","index","handleInputs","React","useState","isChecked","setIsChecked","searchLyrics","a","currentPlaying","document","querySelector","alert","songTitleEl","getElementsByTagName","artist","getAttribute","songTitle","textContent","encodeURIComponent","trim","fetch","then","response","json","data","success","result","length","firstResult","haslyrics","api_lyrics","lyrics","lyricsText","getElementsByClassName","classList","add","setAttribute","catch","error","map","content","i","key","data-reflection","undefined","onClick","type","checked","onChange","htmlFor","data-lyrics","Playbar","previous","isPlaying","next","isLooped","loopAudio","isShuffled","shuffle","mute","isMuted","LinksCollection","name","Navbar","handleClick","activeIndex","link","songs","playlist","shuffledPlaylist","App","objectUrl","setIndex","setIsPlaying","setIsMuted","setIsLooped","setIsShuffled","isShuffledRef","useRef","openInput_ref","addInput_ref","useEffect","progressBar","lineProgressBar","timestamp","currentTimeEl","play_pause","mainAudio","getElementById","pane_album","album_width_init","offsetWidth","updateProgressBar","convertSeconds","currentTime","percentage","parseFloat","duration","toFixed","style","transform","progressTimestamp","event","x","pageX","totalWidth","this","offsetLeft","display","audioSeconds","setCurrentTime","paused","play","togglePlay","pause","spacebarToggle","keyCode","preventDefault","keyboardPrevNext","ratio","album_width","height","window","addEventListener","removeEventListener","j","Math","floor","random","temp","shufflePlaylist","current","clearMainAudio","currentT","line","playPromise","removeAttribute","setTimeout","openFiles","rightPaneContent","allAlbumsNotUnkown","querySelectorAll","target","currentTarget","audioFiles","files","unknownAudioList","unknownAlbum","globalAlbumArt","firstChild","removeChild","forEach","child","imgElements","audioElements","k","imgSrc","URL","revokeObjectURL","l","oldAudio","backgroundImage","resetLyrics","durationEl","createElement","audioEl","trackEl","titleEl","liEl","createObjectURL","onloadedmetadata","readFileInfo","tagInfo","console","log","fileInfo","trackNb","songAlbum","albumGenre","albumYear","picture","muted","replace","appendChild","handleLiClick","unknownAlbumContainer","remove","indexToAppendUnknown","albumTitle","indexOf","unshift","liElements","push","albumsContainers","ulList","songsList","trackNbArray","trackNumbers","sort","indexToAppend","albumIndex","songsInObjects","insertBefore","splice","albumContainerEl","albumInfoEl","albumImageEl","bandNameEl","albumTitleEl","albumGenreEl","titleDivEl","titleLineEl","albumYearEl","audioUlEl","byteArray","Uint8Array","blob","Blob","albumArtUrl","UnknownImage","displayHideList","Promise","resolve","reject","done","inputOpen","isDone","song","concat","songsDOM","globalAlbumEL","indexOfCurrent","previousIndex","playNextOrPrevious","songName","setGlobalAlbumArt","title","nextIndex","nextPrevAudio","curPlayingEl","nextOrPrevEl","_","load","artistTitle","globalAlbum","albumImg","contains","nodeName","playbarDuration","previousLi","currentAudio","songNameEL","audioList","nextElementSibling","file","jsmediatags","read","onSuccess","tag","tags","track","toString","match","padStart","album","genre","year","onError","info","hours","minutes","seconds","accept","multiple","ref","inputAdd","click","onEnded","loop","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.044412de.chunk.js","sourcesContent":["import React from \"react\";\r\nimport unknown from \"../images/unknown.png\";\r\n\r\ninterface Props {\r\n  hideUnknownUl: Function;\r\n}\r\n\r\nconst RightPane = (props: Props) => {\r\n  return (\r\n    <div className=\"right-pane\">\r\n      <div className=\"right-pane__content\">\r\n        <div className=\"album unknown hidden\" data-album=\"unknown\">\r\n          <div className=\"album__info\" onDoubleClick={(e) => {props.hideUnknownUl(e)}}>\r\n            <img className=\"album__cover noAlbumCover unknownImg\" src={unknown} alt=\"unknown\" />\r\n\r\n            <div className=\"band__name\">Unknown Albums</div>\r\n\r\n            <div className=\"album__title\">\r\n              <div className=\"title\">Unknown</div> <span className=\"line\"></span>{\" \"}\r\n              <span className=\"album__year\">Unknown</span>\r\n            </div>\r\n\r\n            <span className=\"album__genre\">Unknown</span>\r\n          </div>\r\n\r\n          <ul className=\"audio__list\"></ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RightPane;\r\n","import React from \"react\";\r\n\r\ninterface Content {\r\n  id: string;\r\n}\r\n\r\ninterface Props {\r\n  handleInputs: Function;\r\n  index: number;\r\n}\r\n\r\nconst API_SEARCH = \"https://api.happi.dev/v1/music?q=\";\r\nconst API_KEY = \"a785bdcxq0qLhDRbaymzbBBm3qFQkQ0IZZJyrLCZ5ywg2ZyswhL0fYpp\";\r\nlet API_LYRICS = \"\";\r\n\r\nconst LeftPane = (props: Props) => {\r\n  const { index, handleInputs } = props;\r\n  const [isChecked, setIsChecked] = React.useState(false);\r\n\r\n  async function searchLyrics() {\r\n    let currentPlaying = document.querySelector(\".nowPlaying\") as HTMLLIElement;\r\n\r\n    if (!currentPlaying) {\r\n      alert(\"No songs selected or loaded\");\r\n    } else {\r\n      let songTitleEl = currentPlaying.getElementsByTagName(\"div\")[0] as HTMLDivElement;\r\n\r\n      let artist = songTitleEl.getAttribute(\"data-artist\") as string;\r\n      let songTitle = songTitleEl.textContent as string;\r\n\r\n      artist = encodeURIComponent(artist.trim());\r\n      songTitle = encodeURIComponent(songTitle.trim());\r\n\r\n      await fetch(API_SEARCH + artist + \"%20\" + songTitle + \"&apikey=\" + API_KEY)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data.success && data.result.length > 0) {\r\n            let firstResult = data.result[0];\r\n\r\n            if (!firstResult.haslyrics) {\r\n              alert(\"No Lyrics available\");\r\n            } else {\r\n              // console.log(firstResult.id_artist, firstResult.id_album, firstResult.id_track)\r\n              API_LYRICS = firstResult.api_lyrics;\r\n\r\n              fetch(API_LYRICS + \"?apikey=\" + API_KEY)\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                  if (data.success) {\r\n                    let lyrics = data.result.lyrics;\r\n\r\n                    let lyricsText = document.getElementsByClassName(\"lyrics__text\")[0] as HTMLDivElement;\r\n                    let lyricsBtn = document.getElementsByClassName(\"lyrics__button\")[0] as HTMLDivElement;\r\n\r\n                    lyricsBtn.classList.add(\"hide\");\r\n                    lyricsText.classList.add(\"show\");\r\n\r\n                    lyricsText.setAttribute(\"data-lyrics\", \"true\");\r\n                    lyricsText.textContent = lyrics;\r\n                  }\r\n                })\r\n                .catch((error) => {\r\n                  alert(\"Something went wrong \" + error);\r\n                });\r\n            }\r\n          } else {\r\n            alert(\"No Lyrics available\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          alert(\"Something went wrong \" + error);\r\n        });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"left-pane\">\r\n      <div className=\"left-pane__item\">\r\n        {ContentCollection.map((content, i) => (\r\n          <div\r\n            key={i}\r\n            id={content.id}\r\n            className={i === index ? \"show\" : \"hide\"}\r\n            data-reflection={content.id === \"album\" ? isChecked : undefined}\r\n          >\r\n            {content.id === \"file\" && (\r\n              <div className=\"file__content\">\r\n                <span className=\"drag-files\">\r\n                  <i className=\"material-icons size\">save_alt</i>\r\n                  <span>Drag .mp3 files</span>\r\n                </span>\r\n\r\n                <div\r\n                  className=\"open-files\"\r\n                  onClick={(e) => {\r\n                    handleInputs(e);\r\n                  }}\r\n                >\r\n                  <i className=\"material-icons size\">file_copy</i>\r\n                  <div>Open files...</div>\r\n                </div>\r\n\r\n                <div\r\n                  className=\"add-files\"\r\n                  onClick={(e) => {\r\n                    handleInputs(e);\r\n                  }}\r\n                >\r\n                  <i className=\"material-icons size\">add</i>\r\n                  <div>Add files...</div>\r\n                </div>\r\n\r\n                <div className=\"toggle-relfection\">\r\n                  <input\r\n                    className=\"reflection-checkbox\"\r\n                    type=\"checkbox\"\r\n                    id=\"relfection-checkbox\"\r\n                    checked={isChecked}\r\n                    onChange={() => {\r\n                      setIsChecked(!isChecked);\r\n                    }}\r\n                  ></input>\r\n                  <label htmlFor=\"relfection-checkbox\">\r\n                    {isChecked ? \"Disable album reflection\" : \"Enable album reflection\"}\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {content.id === \"album\" && (\r\n              <div className={isChecked ? \"reflection show\" : \"reflection\"}>\r\n                <span className=\"reflection__img\"></span>\r\n                <span className=\"reflection__shadow\"></span>\r\n              </div>\r\n            )}\r\n\r\n            {content.id === \"lyrics\" && (\r\n              <div className=\"lyrics__content\" data-lyrics=\"false\">\r\n                <div className=\"lyrics__text\"></div>\r\n                <div className=\"lyrics__button\" onClick={searchLyrics}>\r\n                  Search lyrics\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport let ContentCollection: Content[] = [{ id: \"file\" }, { id: \"album\" }, { id: \"lyrics\" }];\r\n\r\nexport default LeftPane;\r\n\r\n/*\r\n\r\n{content.id === \"theme\" && <div className=\"theme__content\">Theme</div>}\r\n\r\nconst playlist_btn = React.useRef<HTMLDivElement>(null); // or React.createRef<HTMLUListElement>();\r\n\r\n  const input_container = React.useRef<HTMLDivElement>(null); // div with input\r\n  const playlist_input = React.useRef<HTMLInputElement>(null); // input [new playlist]\r\n\r\n  const ulListRef = React.createRef<HTMLUListElement>(); // ul list element\r\n\r\n  // on click [Create New Playlist] \r\n  function new_playlist(e: MouseEvent) {\r\n    playlist_btn.current!.classList.add(\"hide\"); // hide btn\r\n    input_container.current!.classList.remove(\"hide\"); // show input\r\n\r\n    playlist_input.current!.removeAttribute(\"disabled\"); // make accessible\r\n    playlist_input.current!.focus(); // auto focus after click\r\n  }\r\n\r\n  function reset_input() {\r\n    playlist_btn.current!.classList.remove(\"hide\"); // show btn\r\n    input_container.current!.classList.add(\"hide\"); // hide input\r\n\r\n    playlist_input.current!.setAttribute(\"disabled\", \"\"); // disable input\r\n    playlist_input.current!.value = \"\"; // reset value in input\r\n  }\r\n\r\n  // on key press and if key pressed === Enter \r\n  function addPlaylist(e: KeyboardEvent) {\r\n    if (e.key === \"Enter\" && playlist_input.current!.value.length > 0 && playlist_input.current!.value.trim().length) {\r\n      // if correct value - accept the playlist and create new one \r\n\r\n      const newLi = document.createElement(\"li\"); // create new <li> element\r\n      newLi.textContent = playlist_input.current!.value.trim(); // <li> content = value from input\r\n\r\n      ulListRef.current!.appendChild(newLi); // add created <li> to the <ul>\r\n\r\n      if (ulListRef.current!.classList.contains(\"hide\")) {\r\n        ulListRef.current!.classList.remove(\"hide\"); // shows <ul> element if contains .hide class\r\n      }\r\n\r\n      reset_input();\r\n    } else if (e.key === \"Enter\") {\r\n      // otherwise reset entry \r\n      reset_input();\r\n    }\r\n  }\r\n\r\n{content.id === \"playlists\" && (\r\n              <div className=\"playlists__content\">\r\n                <div\r\n                  ref={playlist_btn}\r\n                  className=\"playlist__btn\"\r\n                  onClick={e => {\r\n                    new_playlist(e);\r\n                  }}\r\n                >\r\n                  <i className=\"material-icons md-48\">add</i>\r\n                  <div>Create new playlist</div>\r\n                </div>\r\n\r\n                <div className=\"playlist__input-container hide\" ref={input_container}>\r\n                  <input\r\n                    disabled\r\n                    maxLength={40}\r\n                    id=\"new-input\"\r\n                    ref={playlist_input}\r\n                    onKeyPress={event => {\r\n                      addPlaylist(event);\r\n                    }}\r\n                    type=\"text\"\r\n                    placeholder=\"Playlist name\"\r\n                  />\r\n                </div>\r\n\r\n                <ul className=\"playlist__ul hide\" ref={ulListRef}></ul>\r\n              </div>\r\n            )}\r\n\r\n*/\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  isPlaying: boolean;\r\n  isLooped: boolean;\r\n  isShuffled: boolean;\r\n  isMuted: boolean;\r\n\r\n  loopAudio: Function;\r\n  shuffle: Function;\r\n  mute: Function;\r\n  previous: Function;\r\n  next: Function;\r\n}\r\n\r\nconst Playbar = (props: Props) => {\r\n  return (\r\n    <div className=\"playbar\">\r\n      <span className=\"timestamp\"></span>\r\n\r\n      <div className=\"playbar__left-controls\">\r\n        <span\r\n          className=\"previous\"\r\n          onClick={(e) => {\r\n            props.previous(e);\r\n          }}\r\n        >\r\n          <i className=\"material-icons md-20\">fast_rewind</i>\r\n        </span>\r\n        <span className=\"play-pause\">\r\n          <i className=\"material-icons md-20\">{props.isPlaying ? \"pause\" : \"play_arrow\"}</i>\r\n        </span>\r\n        <span\r\n          className=\"next\"\r\n          onClick={(e) => {\r\n            props.next(e);\r\n          }}\r\n        >\r\n          <i className=\"material-icons md-20\">fast_forward</i>\r\n        </span>\r\n      </div>\r\n      <div className=\"playbar__progress\">\r\n        <span className=\"current-time\">-- : --</span>\r\n\r\n        <span className=\"progress-bar\">\r\n          <span className=\"line\"></span>\r\n        </span>\r\n\r\n        <span className=\"duration\">-- : --</span>\r\n      </div>\r\n\r\n      {/* repeat, shuffle and volume controls */}\r\n      <div className=\"playbar__right-controls\">\r\n        {/* repeat container */}\r\n        <span\r\n          className={props.isLooped ? \"playbar__repeat selected\" : \"playbar__repeat\"}\r\n          onClick={(e) => {\r\n            props.loopAudio(e);\r\n          }}\r\n        >\r\n          <i className=\"material-icons md-20\">repeat</i>\r\n        </span>\r\n\r\n        {/* shuffle container */}\r\n        <span\r\n          className={props.isShuffled ? \"playbar__shuffle selected\" : \"playbar__shuffle\"}\r\n          onClick={(e) => {\r\n            props.shuffle(e);\r\n          }}\r\n        >\r\n          <i className=\"material-icons md-20\">shuffle</i>\r\n        </span>\r\n\r\n        {/* volume container */}\r\n        <div\r\n          className=\"playbar__volume\"\r\n          onClick={(e) => {\r\n            props.mute(e);\r\n          }}\r\n        >\r\n          <i className=\"material-icons md-20 vol-icon\">{props.isMuted ? \"volume_off\" : \"volume_up\"}</i>\r\n\r\n          <div className=\"volume__wrap\">\r\n            <span className=\"bar\">\r\n              <span className=\"line\"></span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Playbar;\r\n","import React from \"react\";\r\n\r\n/* types for array collection */\r\nexport interface Links {\r\n  name: string;\r\n}\r\n\r\ninterface Props {\r\n  handleClick: any;\r\n  activeIndex: number;\r\n}\r\n\r\nconst Navbar = (props: Props) => {\r\n  const { handleClick, activeIndex } = props;\r\n\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"navbar__container\">\r\n        {LinksCollection.map((link, i) => (\r\n          /* for each element in array returns a div item on navbar */\r\n          <div\r\n            className={activeIndex === i ? \"navbar__item active\" : \"navbar__item\" /* checks if (i === activeIndex) */}\r\n            onClick={() => {\r\n              handleClick(i);\r\n            }}\r\n            key={i}\r\n          >\r\n            {link.name}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"navbar__container\">Playlist</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/* array collection of navbar items */\r\nexport let LinksCollection: Links[] = [\r\n  { name: \"File\" },\r\n  { name: \"Album\" },\r\n  { name: \"Lyrics\" }\r\n];\r\n\r\nexport default Navbar;\r\n","import RightPane from \"./components/RightPane\";\nimport LeftPane from \"./components/LeftPane\";\nimport Playbar from \"./components/Playbar\";\nimport Navbar from \"./components/Navbar\";\n\nimport React, { ChangeEvent } from \"react\";\nimport jsmediatags from \"jsmediatags\";\n\nimport UnknownImage from \"./images/unknown.png\";\nimport \"./sass/app.scss\";\n\n/**\n * TODO : check file types\n * TODO : when adding files to existing album add also check if the artist of the album is the same\n * TODO : function to sort albums by ARTIST NAME in playlist from A to Z on adding files\n * TODO : add color text + icons in panes as the variable theme ($third variable)\n *\n * TODO : right click context menu - maybe in future add some options\n *\n * ! Event delegation apparently is discouraged in React. React handles it on its own so each <li> has an EventListener\n */\n\ninterface fileInfo {\n  trackNb: string;\n  songTitle: string;\n  songAlbum: string;\n  albumGenre: string;\n  albumYear: string;\n  artist: string;\n  picture?: any;\n  type: string;\n}\n\ninterface Songs {\n  albumTitle?: string;\n  liElements?: Array<HTMLLIElement>;\n}\n\n/* needed to be put before const App otherwise with each render will reset the variable */\nlet songs: Array<Songs> = []; // songs array -> Array of objects {\"albumTitle\", [ArrayOfLi]}\nlet playlist: Array<HTMLLIElement> = []; // playlist array -> only <li> elements\nlet shuffledPlaylist: Array<HTMLLIElement> = []; // same as playlist but random songs\n\nexport const App = () => {\n  const [activeIndex, setIndex] = React.useState(0); // initial index set to 0 - File Tab\n  const [isPlaying, setIsPlaying] = React.useState(false); // state to check if audio is playing\n  const [isMuted, setIsMuted] = React.useState(false); // state to check if main audio is muted\n  const [isLooped, setIsLooped] = React.useState(false); // state to check if main audio should repeat the song\n  const [isShuffled, setIsShuffled] = React.useState(false); // state to check if playlist is shuffled\n\n  let isShuffledRef = React.useRef<boolean>();\n  const openInput_ref = React.useRef<HTMLInputElement>(null); // input to open new files\n  const addInput_ref = React.useRef<HTMLInputElement>(null); // input to add files to the playlist\n\n  let objectUrl: string; // variable to store url objects\n\n  /* ------------------------------------------------------ */\n  /* --------| Main useEffect with some functions |-------- */\n  /* ------------------------------------------------------ */\n  React.useEffect(() => {\n    let progressBar = document.getElementsByClassName(\"progress-bar\")[0] as HTMLSpanElement; // progress bar container\n    let lineProgressBar = document.querySelector(\".progress-bar .line\") as HTMLSpanElement; // line that indicates the progress\n    let timestamp = document.getElementsByClassName(\"timestamp\")[0] as HTMLSpanElement; // timestamp with HH:MM:SS / current time\n\n    let currentTimeEl = document.getElementsByClassName(\"current-time\")[0] as HTMLSpanElement; // <span> element with current time\n    let play_pause = document.getElementsByClassName(\"play-pause\")[0] as HTMLSpanElement; // play & pause control\n    let mainAudio = document.getElementById(\"mainAudio\") as HTMLAudioElement; // main <audio> element\n\n    let pane_album = document.getElementById(\"album\") as HTMLDivElement; // main album cover\n    let album_width_init = pane_album.offsetWidth; // initial width value\n\n    pane_album.style.height = `${album_width_init}px`; // initialize height = same as width\n\n    /* ------------------------------------------------------------------------------------ */\n    /* --------| on timeUpdate changes current time <span> and moves progress bar |-------- */\n    /* ------------------------------------------------------------------------------------ */\n    function updateProgressBar() {\n      currentTimeEl.textContent = convertSeconds(mainAudio.currentTime); // converts seconds from current audio time and puts it in DOM\n      let percentage = parseFloat(((mainAudio.currentTime / mainAudio.duration) * 100).toFixed(3)); // (currTime / fullDuration) * 100 = current percentage\n      lineProgressBar.style.transform = `translate3d(${-100.2 + percentage}%, 0, 0)`; // updates and moves the line EL according to the percentage\n    }\n\n    /* ---------------------------------------------------- */\n    /* --------| displays timestamp on mouseEnter |-------- */\n    /* ---------------------------------------------------- */\n    function progressTimestamp(this: HTMLElement, event: MouseEvent) {\n      let x = event.pageX; // gets x coords from left side of the page\n\n      let totalWidth = progressBar.offsetWidth; // width of progress bar\n      let percentage = (x - this.offsetLeft) / totalWidth; // gets percentage from progress bar width on current position\n\n      if (mainAudio.src && mainAudio.duration) {\n        timestamp.style.display = \"flex\";\n        timestamp.style.transform = `translate3d(calc(-50% + ${x}px), 0, 0)`; // -50% to center timestamp + \"x\" px from left\n\n        let audioSeconds = mainAudio.duration * percentage; // gets percentage from full audio duration on current position\n        timestamp.textContent = convertSeconds(audioSeconds); // converts seconds into HH:MM:SS and puts it in <span>\n      }\n    }\n\n    /* ----------------------------------------------------------------- */\n    /* --------| sets currentTime when clicked on progress bar |-------- */\n    /* ----------------------------------------------------------------- */\n    function setCurrentTime(this: HTMLElement, event: MouseEvent) {\n      /* element distance from the left of the page - distance of element from the beginning of the parent \n      IF PARENT HAS RELATIVE POSITION add \"- 100px\" because of that left controls that take 100px of space */\n      let xCord = event.pageX - this.offsetLeft;\n\n      let totalWidth = progressBar.offsetWidth; // width of progress bar\n      let percentage = xCord / totalWidth;\n\n      if (mainAudio.src && mainAudio.duration) {\n        let audioSeconds = mainAudio.duration * percentage; // get current seconds / time from percentage of the full audio duration\n        mainAudio.currentTime = audioSeconds; // sets current time on <audio> element\n\n        if (mainAudio.paused) {\n          setIsPlaying(true);\n          mainAudio.play();\n        }\n      }\n    }\n\n    /* ------------------------------------------------------ */\n    /* --------| Plays or pauses mainAudio on click |-------- */\n    /* ------------------------------------------------------ */\n    function togglePlay() {\n      /* only if mainAudio has loaded data */\n      if (mainAudio.src && mainAudio.duration) {\n        if (isPlaying === false) {\n          setIsPlaying(true);\n          mainAudio.play();\n        } else if (isPlaying === true) {\n          setIsPlaying(false);\n          mainAudio.pause();\n        }\n      }\n    }\n\n    /* --------------------------------------------------------------- */\n    /* --------| Plays or pauses mainAudio on spacebar press |-------- */\n    /* --------------------------------------------------------------- */\n    function spacebarToggle(event: KeyboardEvent) {\n      if (event.keyCode === 32 && mainAudio.src) {\n        event.preventDefault();\n        togglePlay();\n      }\n    }\n\n    /* ---------------------------------------------------------------- */\n    /* --------| Prev Or Next on \"J\" Or \"L\" press on keyboard |-------- */\n    /* ---------------------------------------------------------------- */\n    function keyboardPrevNext(event: KeyboardEvent) {\n      if (mainAudio.src) {\n        switch (event.keyCode) {\n          case 74:\n            event.preventDefault();\n            previous();\n            break;\n\n          case 76:\n            event.preventDefault();\n            next();\n            break;\n        }\n      }\n    }\n\n    /* ----------------------------------------------------------------------------- */\n    /* --------| when mainAudio is / starts playing sets isPlaying to true |-------- */\n    /* ----------------------------------------------------------------------------- */\n    function play() {\n      setIsPlaying(true);\n    }\n\n    /* -------------------------------------------------------------------- */\n    /* --------| when mainAudio is paused sets isPlaying to false |-------- */\n    /* -------------------------------------------------------------------- */\n    function pause() {\n      setIsPlaying(false);\n    }\n\n    /* ---------------------------------------------------- */\n    /* --------| onMouseLeave hides the timestamp |-------- */\n    /* ---------------------------------------------------- */\n    function hideTimestamp() {\n      timestamp.style.display = \"none\";\n    }\n\n    /* -------------------------------------------------- */\n    /* --------| keeps aspect ratio on resizing |-------- */\n    /* -------------------------------------------------- */\n    function ratio() {\n      let album_width = pane_album.offsetWidth; // gets album width\n      pane_album.style.height = `${album_width}px`; // sets height\n    }\n\n    /**\n     * * Adds event listeners on components mount\n     */\n    window.addEventListener(\"keydown\", spacebarToggle);\n    window.addEventListener(\"keydown\", keyboardPrevNext);\n\n    progressBar.addEventListener(\"mousemove\", progressTimestamp);\n    progressBar.addEventListener(\"mouseleave\", hideTimestamp);\n    progressBar.addEventListener(\"click\", setCurrentTime);\n\n    mainAudio.addEventListener(\"timeupdate\", updateProgressBar);\n    mainAudio.addEventListener(\"pause\", pause);\n    mainAudio.addEventListener(\"play\", play);\n\n    play_pause.addEventListener(\"click\", togglePlay);\n    window.addEventListener(\"resize\", ratio);\n\n    /**\n     * * On components unmount - event listeners cleanup\n     */\n    return function cleanupListener() {\n      window.removeEventListener(\"keydown\", spacebarToggle);\n      window.removeEventListener(\"keydown\", keyboardPrevNext);\n\n      progressBar.removeEventListener(\"mousemove\", progressTimestamp);\n      progressBar.removeEventListener(\"mouseleave\", setCurrentTime);\n      progressBar.removeEventListener(\"click\", setCurrentTime);\n\n      mainAudio.removeEventListener(\"timeupdate\", updateProgressBar);\n      mainAudio.removeEventListener(\"pause\", pause);\n      mainAudio.removeEventListener(\"play\", play);\n\n      play_pause.removeEventListener(\"click\", togglePlay);\n      window.removeEventListener(\"resize\", ratio);\n    };\n  });\n\n  /* -------------------------------------------------------------- */\n  /* --------| useEffect only if isShuffled state changes |-------- */\n  /* -------------------------------------------------------------- */\n  React.useEffect(() => {\n    shufflePlaylist();\n\n    isShuffledRef.current = isShuffled;\n\n    /* --------------------------------------------- */\n    /* --------| shuffle playlist function |-------- */\n    /* --------------------------------------------- */\n    function shufflePlaylist() {\n      /* only if state (isShuffled) true */\n      if (isShuffled) {\n        shuffledPlaylist = []; // reset the array\n        // shuffledPlaylist = playlist.slice(0); // copy each element from playlist to shuffledPlaylist\n        shuffledPlaylist = [...playlist];\n\n        /* shuffle the array */\n        for (let i = shuffledPlaylist.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * i);\n          const temp = shuffledPlaylist[i];\n          shuffledPlaylist[i] = shuffledPlaylist[j];\n          shuffledPlaylist[j] = temp;\n        }\n      }\n    }\n  }, [isShuffled]);\n\n  /* -------------------------------------------- */\n  /* --------| simply changes the index |-------- */\n  /* -------------------------------------------- */\n  const handleIndex = (index: number) => {\n    setIndex(index);\n  };\n\n  /* --------------------------------------------------- */\n  /* --------| simulates mouse click on inputs |-------- */\n  /* --------------------------------------------------- */\n  function handleInputsClick(event: React.MouseEvent) {\n    /* checks first which button is clicked then simulates mouse click on input */\n    if (event.currentTarget.classList.contains(\"open-files\") && openInput_ref.current) {\n      openInput_ref.current.click();\n    } else if (event.currentTarget.classList.contains(\"add-files\") && addInput_ref.current) {\n      addInput_ref.current.click();\n    }\n  }\n\n  /* --------------------------------------------- */\n  /* --------| simply changes loop state |-------- */\n  /* --------------------------------------------- */\n  function loopAudio() {\n    setIsLooped(!isLooped);\n  }\n\n  /* ----------------------------------------- */\n  /* --------| changes shuffle state |-------- */\n  /* ----------------------------------------- */\n  function shuffle() {\n    /* only if there are elements in playlist Array */\n    if (playlist.length > 0) {\n      setIsShuffled(!isShuffled);\n    }\n  }\n\n  /* ---------------------------------------------- */\n  /* --------| mutes or unmutes mainAudio |-------- */\n  /* ---------------------------------------------- */\n  function muteAudio() {\n    let mainAudio = document.getElementById(\"mainAudio\") as HTMLAudioElement;\n\n    /* if mainAudio element isn't mute - mutes the audio and changes the state */\n    if (!mainAudio.muted) {\n      mainAudio.muted = true;\n      setIsMuted(true);\n    } else {\n      mainAudio.muted = false;\n      setIsMuted(false);\n    }\n  }\n\n  /* -------------------------------------------------------------- */\n  /* --------| clears src, currentTime, progress bar etc. |-------- */\n  /* -------------------------------------------------------------- */\n  function clearMainAudio() {\n    let mainAudio = document.getElementById(\"mainAudio\") as HTMLAudioElement;\n    let duration = document.getElementsByClassName(\"duration\")[0];\n    let currentT = document.getElementsByClassName(\"current-time\")[0];\n    let line = document.querySelector(\".progress-bar .line\") as HTMLSpanElement;\n\n    setIsShuffled(false); // reset shuffled\n\n    if (mainAudio.src) {\n      let playPromise = mainAudio.play(); // promise returned from play()\n\n      /* proper way to clear audio */\n      if (playPromise !== undefined) {\n        playPromise.then(() => {\n          setIsPlaying(false);\n          mainAudio.pause();\n\n          mainAudio.setAttribute(\"src\", \"\"); // clear src\n          mainAudio.removeAttribute(\"src\"); // remove src attribute completely\n          line.style.transform = \"translate3d(-100.2%, 0, 0)\"; // reset line on progress bar\n\n          /* resets current time and duration text */\n          /* needed to add timeout because mainAudio has\n          eventListener on timeupdate and it isn't sometimes\n          100% done so currentTime text changes to 00:00 */\n          setTimeout(() => {\n            duration.textContent = \"-- : --\";\n            currentT.textContent = \"-- : --\";\n          }, 250);\n        });\n      }\n    }\n  }\n\n  /* fire on change when user opens files */\n  async function openFiles(event: ChangeEvent): Promise<{ done: boolean }> {\n    let rightPaneContent = document.getElementsByClassName(\"right-pane__content\")[0] as HTMLDivElement; // container with all [albums] <div>\n    let allAlbumsNotUnkown = document.querySelectorAll(\".album:not(.unknown)\"); // get all the albums but not unknown\n    let target = event.currentTarget as HTMLInputElement; // current input [openFiles]\n    let audioFiles = target.files; // files from the input\n    let unknownAudioList = document.querySelector(\".album[data-album='unknown'] .audio__list\");\n\n    rightPaneContent.classList.add(\"noTouching\"); // prevent user from clicking too fast\n\n    let unknownAlbum = document.querySelector(\".album[data-album='unknown']\");\n    let globalAlbumArt = document.getElementById(\"album\") as HTMLDivElement;\n\n    if (unknownAudioList && unknownAlbum) {\n      while (unknownAudioList!.firstChild) {\n        unknownAudioList!.removeChild(unknownAudioList!.firstChild);\n      }\n      unknownAlbum.classList.add(\"hidden\");\n    }\n\n    allAlbumsNotUnkown.forEach(function (child) {\n      rightPaneContent.removeChild(child);\n    });\n\n    /* if right pane has already files from previous selection or some magically appear\n       checks if there's any div with \"album\" class but not the hidden <div> with unknown album */\n    if (allAlbumsNotUnkown.length) {\n      let imgElements = document.querySelectorAll(\".album__cover:not(.unknownImg)\");\n      let audioElements = document.querySelectorAll(\".song__audio\");\n\n      /* releases from memory all URL objects from <img> files src */\n      for (let k = 0; k < imgElements.length; k++) {\n        let imgSrc = imgElements[k] as HTMLImageElement;\n        URL.revokeObjectURL(imgSrc.src);\n      }\n\n      /* releases from memory all URL objects from <audio> files src */\n      for (let l = 0; l < audioElements.length; l++) {\n        let oldAudio = audioElements[l] as HTMLAudioElement;\n        URL.revokeObjectURL(oldAudio.src); // release previous URL objects / src for audio files\n      }\n    }\n\n    globalAlbumArt.setAttribute(\"data-cover\", \"false\");\n    globalAlbumArt.style.backgroundImage = \"\";\n    clearMainAudio();\n\n    resetLyrics();\n\n    songs = [];\n    playlist = [];\n\n    /* checks if any file was selected or not */\n    if (!audioFiles || !audioFiles.length) {\n      alert(\"No files selected\");\n    } else {\n      /**\n       *\n       * * <div class=\"album\" />\n       *\n       * * <div class=\"album__info\" />\n       * *    <img class=\"album__cover\" />\n       * *    <div class=\"band__name\" />\n       * *    <div class=\"album__title\" />\n       *\n       * *        <div class=\"title\" />\n       * *        <span class=\"line\" />\n       * *        <span class=\"album__year\" />\n       *\n       * *    <span class=\"album__genre\" />\n       *\n       * * <ul class=\"audio__list\" />\n       *\n       * *    <li class=\"song\" />\n       *\n       * *        <audio class=\"song__audio\" />\n       * *        <span class=\"track-nb\" />\n       * *        <div class=\"song__title\" />\n       * *        <span class=\"song__duration\" />\n       *\n       */\n\n      for (let i = 0; i < audioFiles.length; i++) {\n        /* for each audio file */\n\n        const durationEl = document.createElement(\"span\");\n        const audioEl = document.createElement(\"audio\");\n        const trackEl = document.createElement(\"span\");\n        const titleEl = document.createElement(\"div\");\n        const liEl = document.createElement(\"li\");\n\n        /**\n         * --------------------------------\n         * * Set className for each element\n         * --------------------------------\n         */\n\n        durationEl.classList.add(\"song__duration\");\n        audioEl.classList.add(\"song__audio\");\n        titleEl.classList.add(\"song__title\");\n        trackEl.classList.add(\"track-nb\");\n        liEl.classList.add(\"song\");\n\n        // create blob string for each imported audio file and add src for each <audio>\n        objectUrl = URL.createObjectURL(audioFiles[i]);\n        audioEl.setAttribute(\"src\", objectUrl);\n\n        audioEl.onloadedmetadata = function () {\n          durationEl.textContent = convertSeconds(audioEl.duration);\n        };\n\n        let fileInfo = await readFileInfo(audioFiles[i])\n          .then((tagInfo) => {\n            return tagInfo as fileInfo;\n          })\n          .catch((error) => {\n            console.log(error);\n            return error;\n          });\n\n        const { trackNb, songTitle, songAlbum, albumGenre, albumYear, artist, picture, type } = fileInfo;\n\n        audioEl.muted = true;\n        liEl.setAttribute(\"data-track\", trackNb);\n        liEl.setAttribute(\"data-album\", songAlbum);\n        trackEl.textContent = trackNb + \".\";\n        titleEl.setAttribute(\"data-artist\", artist);\n        titleEl.textContent = songTitle === \"Unknown\" ? `${audioFiles[i].name.replace(/\\.[^/.]+$/, \"\")}` : songTitle;\n\n        liEl.appendChild(audioEl); // add <audio> with src\n        liEl.appendChild(trackEl); // add <span> with track number\n        liEl.appendChild(titleEl); // add <div> with title\n        liEl.appendChild(durationEl); // add <span> with duration\n        liEl.addEventListener(\"dblclick\", handleLiClick);\n\n        /* 3 options :\n                  - song album is unknown - add to the Album with data-album=\"unknown\" and remove .hidden class to display it\n                  - song album was already added - add song to the the existing Album with data-album=\"old-album\"\n                  - song album is a new one - create new Album <div> with data-album=\"new-album\" */\n\n        /* 1st option - if [Album] is unknown */\n        if (songAlbum === \"Unknown\") {\n          let unknownAlbumContainer = document.querySelector(\".album[data-album='unknown']\");\n\n          if (unknownAlbumContainer && unknownAudioList) {\n            unknownAlbumContainer.classList.remove(\"hidden\");\n            unknownAudioList.appendChild(liEl);\n          }\n\n          if (songs.length) {\n            let indexToAppendUnknown = songs\n              .map((e) => {\n                return e.albumTitle;\n              })\n              .indexOf(\"Unknown\");\n\n            if (indexToAppendUnknown === -1) {\n              songs.unshift({ albumTitle: \"Unknown\", liElements: [liEl] });\n            } else {\n              let unknownSongs = songs[indexToAppendUnknown].liElements as Array<HTMLLIElement>;\n              unknownSongs.push(liEl);\n            }\n          } else {\n            songs.push({ albumTitle: \"Unknown\", liElements: [liEl] });\n          }\n\n          /* 2 other options only if title of [Album] isn't undefined */\n        } else if (songAlbum) {\n          let albumsContainers = document.querySelector(\n            `.album[data-album=\"${songAlbum.replace(/\\\\([\\s\\S])|(\")/g, \"\\\\$1$2\")}\"]`\n          ); // gets div with same album as the current file\n          /* replace function to escape dobule quotes if a string contains any */\n\n          /* 2nd option - if [Album] already exists */\n          if (albumsContainers) {\n            let ulList = albumsContainers.getElementsByTagName(\"ul\")[0];\n            let songsList = ulList.getElementsByClassName(\"song\");\n\n            let trackNbArray = [];\n\n            for (let j = 0; j < songsList.length; j++) {\n              let trackNumbers = songsList[j].getAttribute(\"data-track\");\n              trackNbArray.push(trackNumbers);\n            }\n\n            trackNbArray.push(trackNb);\n            trackNbArray.sort();\n\n            let indexToAppend = trackNbArray.indexOf(trackNb);\n\n            let albumIndex = songs\n              .map((e) => {\n                return e.albumTitle;\n              })\n              .indexOf(songAlbum);\n\n            let songsInObjects = songs[albumIndex].liElements;\n\n            if (indexToAppend === 0 && songsInObjects) {\n              ulList.insertBefore(liEl, songsList[0]);\n              songsInObjects.splice(0, 0, liEl);\n            } else if (songsList[indexToAppend] && songsInObjects) {\n              ulList.insertBefore(liEl, songsList[indexToAppend]);\n              songsInObjects.splice(indexToAppend, 0, liEl);\n            } else {\n              ulList.appendChild(liEl);\n\n              if (songsInObjects) {\n                songsInObjects.push(liEl);\n              }\n            }\n          } else {\n            /* 3rd option - create new [Album] since it's neither Unknown neither existing already */\n\n            /**\n             * * Create DOM elements\n             */\n\n            const albumContainerEl = document.createElement(\"div\");\n\n            const albumInfoEl = document.createElement(\"div\");\n\n            const albumImageEl = document.createElement(\"img\");\n            const bandNameEl = document.createElement(\"div\");\n            const albumTitleEl = document.createElement(\"div\");\n            const albumGenreEl = document.createElement(\"span\");\n\n            const titleDivEl = document.createElement(\"div\");\n            const titleLineEl = document.createElement(\"span\");\n            const albumYearEl = document.createElement(\"span\");\n\n            const audioUlEl = document.createElement(\"ul\");\n\n            /**\n             * * Set classes\n             */\n\n            albumContainerEl.classList.add(\"album\");\n            albumInfoEl.classList.add(\"album__info\");\n            albumImageEl.classList.add(\"album__cover\");\n            bandNameEl.classList.add(\"band__name\");\n            albumTitleEl.classList.add(\"album__title\");\n            albumGenreEl.classList.add(\"album__genre\");\n            titleDivEl.classList.add(\"title\");\n            titleLineEl.classList.add(\"line\");\n            albumYearEl.classList.add(\"album__year\");\n            audioUlEl.classList.add(\"audio__list\");\n\n            /**\n             * * Set attributes and data\n             */\n\n            if (picture) {\n              const byteArray = new Uint8Array(picture.data);\n              const blob = new Blob([byteArray], { type });\n              const albumArtUrl = URL.createObjectURL(blob);\n              albumImageEl.src = albumArtUrl;\n            } else {\n              albumImageEl.classList.add(\"noAlbumCover\");\n              albumImageEl.src = UnknownImage;\n            }\n\n            albumContainerEl.setAttribute(\"data-album\", songAlbum);\n            albumContainerEl.setAttribute(\"data-artist\", artist);\n            bandNameEl.textContent = artist;\n            titleDivEl.textContent = songAlbum;\n            albumYearEl.textContent = albumYear;\n            albumGenreEl.textContent = albumGenre;\n            albumInfoEl.addEventListener(\"dblclick\", displayHideList);\n\n            /**\n             * * Append elements\n             */\n\n            rightPaneContent.appendChild(albumContainerEl);\n            albumContainerEl.appendChild(albumInfoEl);\n\n            albumInfoEl.appendChild(albumImageEl);\n            albumInfoEl.appendChild(bandNameEl);\n            albumInfoEl.appendChild(albumTitleEl);\n\n            albumTitleEl.appendChild(titleDivEl);\n            albumTitleEl.appendChild(titleLineEl);\n            albumTitleEl.appendChild(albumYearEl);\n\n            albumInfoEl.appendChild(albumGenreEl);\n\n            albumContainerEl.appendChild(audioUlEl);\n\n            audioUlEl.appendChild(liEl);\n\n            /* add to the array of LiElements with songs */\n            songs.push({ albumTitle: songAlbum, liElements: [liEl] });\n          }\n        } else {\n          alert(\"Error. Something went wrong\");\n        }\n      }\n    }\n    return new Promise((resolve, reject) => {\n      resolve({ done: true });\n      reject({ error: \"Something went wrong\" });\n    });\n  }\n\n  /* --------------------------------------------------------- */\n  /* --------| Fires when clicked on [Open files...] |-------- */\n  /* --------------------------------------------------------- */\n  async function inputOpen(event: ChangeEvent) {\n    /* executes openFiles() and waits for it to be done */\n    await openFiles(event)\n      .then((isDone) => {\n        if (isDone) {\n          /* when Promise resolved and openFiles() is done\n          removes class added in openFiles() that \n          prevents user to click any <li> before it's fully executed */\n          let rightPaneContent = document.querySelector(\".right-pane__content\") as HTMLDivElement;\n          rightPaneContent.classList.remove(\"noTouching\");\n\n          /* gets every <li> element from Array[Songs] (and only <li>)\n          and puts them in Array[Playlist] in same order as in [Songs] */\n          songs.forEach(function (song) {\n            playlist = playlist.concat(...(song.liElements as Array<HTMLLIElement>));\n          });\n        }\n      })\n      .catch((error) => {\n        alert(\"Something went wrong \" + error);\n        console.log(error);\n      });\n  }\n\n  /* -------------------------------------------------------- */\n  /* --------| Fires when clicked on [Add files...] |-------- */\n  /* -------------------------------------------------------- */\n  async function inputAdd(event: ChangeEvent) {\n    let songsDOM = document.querySelectorAll(\".song\"); // gets every <li class=\"song\">\n\n    /* if there's no songs in DOM - will execute as if user clicked on [Open files...]\n       otherwise executes addFiles() and waits for it to be done */\n    if (!songsDOM.length) {\n      inputOpen(event);\n    } else {\n      console.log(songsDOM);\n    }\n  }\n\n  /* ----------------------------------------------------- */\n  /* --------| Play Previous audio from playlist |-------- */\n  /* ----------------------------------------------------- */\n  function previous() {\n    let mainAudio = document.getElementById(\"mainAudio\") as HTMLAudioElement; // main <audio>\n\n    /* if playlist contains audios and any song is already loaded */\n    if (playlist.length > 0 && mainAudio.src) {\n      let currentPlaying = document.querySelector(\".nowPlaying\") as HTMLLIElement; // current song that was/is selected\n      let globalAlbumEL = document.getElementById(\"album\") as HTMLDivElement;\n\n      resetLyrics();\n\n      /* when user chooses to enable the shuffle option\n      shuffledPlaylist is selected instead of playlist */\n      if (isShuffledRef.current) {\n        let indexOfCurrent = shuffledPlaylist.indexOf(currentPlaying);\n\n        /* if reaches beginning of the playlist plays the last audio\n         otherwise plays previous audio from the playlist */\n        if (indexOfCurrent === 0) {\n          let previousIndex = shuffledPlaylist[shuffledPlaylist.length - 1];\n          let previousAudio = previousIndex.getElementsByTagName(\"audio\")[0];\n\n          playNextOrPrevious(mainAudio, previousAudio, currentPlaying, previousIndex);\n\n          let songName = previousIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = previousIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        } else {\n          let previousIndex = shuffledPlaylist[indexOfCurrent - 1];\n          let previousAUdio = previousIndex.getElementsByTagName(\"audio\")[0];\n\n          playNextOrPrevious(mainAudio, previousAUdio, currentPlaying, previousIndex);\n\n          let songName = previousIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = previousIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        }\n      } else {\n        /* default playlist - no shuffle enabled */\n        let indexOfCurrent = playlist.indexOf(currentPlaying); // get index of current audio in the playlist\n\n        /* if reaches beginning of the playlist plays the last audio\n         otherwise plays previous audio from the playlist */\n        if (indexOfCurrent === 0) {\n          let previousIndex = playlist[playlist.length - 1];\n          let previousAudio = previousIndex.getElementsByTagName(\"audio\")[0];\n\n          playNextOrPrevious(mainAudio, previousAudio, currentPlaying, previousIndex);\n\n          let songName = previousIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = previousIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        } else {\n          let previousIndex = playlist[indexOfCurrent - 1]; // gets previous index (current - 1) element\n          let previousAudio = previousIndex.getElementsByTagName(\"audio\")[0]; // retrieves previous audio from playlist\n\n          playNextOrPrevious(mainAudio, previousAudio, currentPlaying, previousIndex);\n\n          let songName = previousIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = previousIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        }\n      }\n    }\n  }\n\n  /* ------------------------------------------------- */\n  /* --------| Play Next audio from playlist |-------- */\n  /* ------------------------------------------------- */\n  function next() {\n    let mainAudio = document.getElementById(\"mainAudio\") as HTMLAudioElement; // main <audio>\n\n    /* if playlist contains audios and any song is already loaded */\n    if (playlist.length > 0 && mainAudio.src) {\n      let currentPlaying = document.querySelector(\".nowPlaying\") as HTMLLIElement; // current song that was/is selected\n      let globalAlbumEL = document.getElementById(\"album\") as HTMLDivElement;\n\n      resetLyrics();\n\n      /* when user chooses to enable the shuffle option\n      shuffledPlaylist is selected instead of playlist */\n      if (isShuffledRef.current) {\n        let indexOfCurrent = shuffledPlaylist.indexOf(currentPlaying); // get index of current audio in the shuffledPlaylist\n\n        /* if reaches end of the shuffledPlaylist plays the first audio\n         otherwise plays next audio from the shuffledPlaylist */\n        if (indexOfCurrent === shuffledPlaylist.length - 1) {\n          let nextIndex = shuffledPlaylist[0];\n          let nextAudio = nextIndex.getElementsByTagName(\"audio\")[0];\n\n          playNextOrPrevious(mainAudio, nextAudio, currentPlaying, nextIndex);\n\n          let songName = nextIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = nextIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        } else {\n          let nextIndex = shuffledPlaylist[indexOfCurrent + 1]; // gets next index (current + 1) element\n          let nextAudio = nextIndex.getElementsByTagName(\"audio\")[0]; // retrieves next audio from shuffledPlaylist\n\n          playNextOrPrevious(mainAudio, nextAudio, currentPlaying, nextIndex);\n\n          let songName = nextIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = nextIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        }\n      } else {\n        /* default playlist - no shuffle enabled */\n        let indexOfCurrent = playlist.indexOf(currentPlaying); // get index of current audio in the playlist\n\n        /* if reaches end of the playlist plays the first audio\n         otherwise plays next audio from the playlist */\n        if (indexOfCurrent === playlist.length - 1) {\n          let nextIndex = playlist[0];\n          let nextAudio = nextIndex.getElementsByTagName(\"audio\")[0];\n\n          playNextOrPrevious(mainAudio, nextAudio, currentPlaying, nextIndex);\n\n          let songName = nextIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = nextIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        } else {\n          let nextIndex = playlist[indexOfCurrent + 1]; // gets next index (current + 1) element\n          let nextAudio = nextIndex.getElementsByTagName(\"audio\")[0]; // retrieves next audio from playlist\n\n          playNextOrPrevious(mainAudio, nextAudio, currentPlaying, nextIndex);\n\n          let songName = nextIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = nextIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        }\n      }\n    }\n  }\n\n  /* ----------------------------------------------------------- */\n  /* --------| Checks if prev/next audio can be played |-------- */\n  /* -----------| and loads media then plays audio |------------ */\n  /* ----------------------------------------------------------- */\n  function playNextOrPrevious(\n    mainAudio: HTMLAudioElement,\n    nextPrevAudio: HTMLAudioElement,\n    curPlayingEl: HTMLLIElement,\n    nextOrPrevEl: HTMLLIElement\n  ) {\n    /* since play() returns a promise - first checks if promise isn't undefined so it can load media\n       then checks again if it can actually play the loaded src */\n    let playPromise = mainAudio.play();\n    if (playPromise !== undefined) {\n      playPromise\n        .then((_) => {\n          let playbarDuration = document.getElementsByClassName(\"duration\")[0]; // duration element in the App\n          /* update audio duration for prev/next \n             update audio src from prev/next and load it */\n          playbarDuration.textContent = convertSeconds(nextPrevAudio.duration);\n          mainAudio.src = nextPrevAudio.src;\n          mainAudio.load();\n\n          /* remove indicator from current playing and add to the prev/next */\n          curPlayingEl.classList.remove(\"nowPlaying\");\n          nextOrPrevEl.classList.add(\"nowPlaying\");\n\n          if (playPromise !== undefined) {\n            playPromise\n              .then((_) => {\n                mainAudio.play();\n              })\n              .catch((error) => {\n                alert(\"Something went wrong \" + error);\n                console.log(error);\n              });\n          }\n        })\n        .catch((error) => {\n          alert(\"Something went wrong \" + error);\n          console.log(error);\n        });\n    }\n  }\n\n  /* --------------------------------------------------------------------- */\n  /* --------| changes the global artwork on Click | Prev | Next |-------- */\n  /* --------------------------------------------------------------------- */\n  function setGlobalAlbumArt(albumTitle: string, artistTitle: string, globalAlbum: HTMLDivElement) {\n    if (albumTitle === \"Unknown\") {\n      globalAlbum.style.backgroundImage = `url(${UnknownImage})`; // default image\n      globalAlbum.setAttribute(\"data-cover\", \"false\"); // data to tell if there is album art so the borders AND reflection should appear if is enabled\n    } else {\n      let albumEL = document.querySelector(\n        `.album[data-album=\"${albumTitle.replace(/\\\\([\\s\\S])|(\")/g, \"\\\\$1$2\")}\"][data-artist=\"${artistTitle.replace(\n          /\\\\([\\s\\S])|(\")/g,\n          \"\\\\$1$2\"\n        )}\"]`\n      ) as HTMLDivElement; // gets album from rightPane with same AlbumTitle and AlbumArtist + escape double quotes\n      let albumImg = albumEL.getElementsByTagName(\"img\")[0] as HTMLImageElement; // gets the <img> inside ALBUM <div>\n\n      let imgSrc = albumImg.src; // get the src from <img> inside ALBUM <div> element\n\n      globalAlbum.style.backgroundImage = `url(${imgSrc})`; // replaces the global art work with current\n\n      /* condition to tell if data attribute should be set to TRUE of FALSE\n      if ALBUM <img> has no cover art doesn't set the borders otherwise\n      if it has cover art sets data attribute to true and border is displayed */\n      if (albumImg.classList.contains(\"noAlbumCover\")) {\n        globalAlbum.setAttribute(\"data-cover\", \"false\");\n      } else {\n        globalAlbum.setAttribute(\"data-cover\", \"true\");\n      }\n    }\n  }\n\n  /* ------------------------------------------------------ */\n  /* --------| resets lyrics from previous search |-------- */\n  /* ------------------------------------------------------ */\n  function resetLyrics() {\n    let lyricsText = document.getElementsByClassName(\"lyrics__text\")[0]; // lyrics text for specific song\n    let lyricsAttr = lyricsText.getAttribute(\"data-lyrics\"); // gets data attribute to check if <div> has lyrics text\n\n    /* if <div> text has already lyrics from previous search */\n    if (lyricsAttr === \"true\") {\n      let lyricsBtn = document.getElementsByClassName(\"lyrics__button\")[0] as HTMLDivElement; // gets button\n\n      lyricsBtn.classList.remove(\"hide\"); // displays button again\n      lyricsText.textContent = \"\"; // removes previous lyrics\n      lyricsText.classList.remove(\"show\"); // hides lyrics__text <div>\n    }\n  }\n\n  /* ------------------------------------------------------------- */\n  /* --------| Plays selected audio from <li> on dbClick |-------- */\n  /* ------------------------------------------------------------- */\n  async function handleLiClick(event: MouseEvent) {\n    let currentTarget = event.currentTarget as HTMLLIElement; // currentTarget so only <li> no child elements\n\n    resetLyrics();\n\n    /* re-shuffle playlist if isShuffled was enabled */\n    if (isShuffledRef.current) {\n      setIsShuffled(false);\n      setIsShuffled(true);\n    }\n\n    /* only fires when <li> is dbClicked */\n    if (currentTarget && currentTarget.nodeName === \"LI\") {\n      let mainAudio = document.getElementById(\"mainAudio\") as HTMLAudioElement; // gets main <audio>\n      let playbarDuration = document.getElementsByClassName(\"duration\")[0]; // gets duration element\n      let previousLi = document.querySelector(\".nowPlaying\"); // gets previous playing song if exists\n\n      let currentAudio = currentTarget.getElementsByTagName(\"audio\")[0]; // gets <audio> from selected <li> element\n      let songNameEL = currentTarget.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n      let artist = songNameEL.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n      let albumTitle = currentTarget.getAttribute(\"data-album\") as string; // get album title from data attribute\n      let globalAlbumEL = document.getElementById(\"album\") as HTMLDivElement;\n\n      mainAudio.src = currentAudio.src; // gets src from selected audio\n      mainAudio.load(); // loads the audio\n\n      let playPromise = mainAudio.play();\n\n      /* checks if promise isn't undefined after new src load and then plays audio */\n      if (playPromise !== undefined) {\n        playPromise\n          .then(() => {\n            mainAudio.play();\n            setIsPlaying(true);\n          })\n          .catch((error) => {\n            alert(\"Can't play this song\");\n          });\n      }\n\n      /* removes indicator from previous <li> selection if there is any */\n      if (previousLi) {\n        previousLi.classList.remove(\"nowPlaying\");\n      }\n\n      playbarDuration.textContent = convertSeconds(currentAudio.duration); // sets current duration in DOM\n      currentTarget.classList.add(\"nowPlaying\"); // adds indicator on current <li>\n\n      setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n      document.title = artist + \" - \" + songNameEL.textContent; // sets the title of document to the current song\n    }\n  }\n\n  /* -------------------------------------------------- */\n  /* --------| Hides or shows <ul> on dbClick |-------- */\n  /* -------------------------------------------------- */\n  function displayHideList(event: MouseEvent) {\n    let currentTarget = event.currentTarget as HTMLDivElement; // <div class=\"album__info\">\n    let audioList = currentTarget.nextElementSibling; // <ul> is the next sibling element\n\n    /* toggle class to Hide | Show <ul> */\n    if (audioList) {\n      if (audioList.classList.contains(\"hidden\")) {\n        audioList.classList.remove(\"hidden\");\n      } else {\n        audioList.classList.add(\"hidden\");\n      }\n    }\n  }\n\n  /* -------------------------------------------------------------------------- */\n  /* --------| Reads info from media file (track, artist, album etc.) |-------- */\n  /* -------------------------------------------------------------------------- */\n  function readFileInfo(file: File) {\n    return new Promise((resolve, reject) => {\n      jsmediatags.read(file, {\n        onSuccess: function (tag) {\n          let type = tag.type;\n          let tags = tag.tags;\n\n          /* checks for every info if exists otherwise sets it to \"Unknown\" */\n          /* if track number is undefined sets track number as 01 insted\n          otherwise takes only track number before \"/\" if there's any slash\n          and if string has only 1 digit then adds leading zero */\n          /* picture's type isn't a string so if it's undefined \n          it will be replaced later by default image */\n          let trackNb = tags.track ? `${tags.track.toString().match(/[^/]+/)}`.padStart(2, \"0\") : \"01\";\n          let songTitle = tags.title ? `${tags.title}` : \"Unknown\";\n          let songAlbum = tags.album ? `${tags.album}` : \"Unknown\";\n          let albumGenre = tags.genre ? `${tags.genre}` : \"Unknown\";\n          let albumYear = tags.year ? `${tags.year}` : \"Unknown\";\n          let artist = tags.artist ? `${tags.artist}` : \"Unknown\";\n          let picture = tags.picture;\n\n          /* creates fileInfo object */\n          let mediaInfo: fileInfo = {\n            trackNb: trackNb,\n            songTitle: songTitle,\n            songAlbum: songAlbum,\n            albumGenre: albumGenre,\n            albumYear: albumYear,\n            artist: artist,\n            picture: picture,\n            type: type,\n          };\n\n          /* onSucces returns object with info from media file */\n          resolve(mediaInfo);\n        },\n        onError: function (error) {\n          reject(\"Error in JSMediaTags \\nError info: \" + error.info + \"\\nError type: \" + error.type);\n        },\n      });\n    });\n  }\n\n  /* -------------------------------------------------------------- */\n  /* --------| Returns duration in sec in HH:MM:SS format |-------- */\n  /* -------------------------------------------------------------- */\n  function convertSeconds(duration: number) {\n    let hours, minutes, seconds;\n\n    /* converts duration into Hours | Minutes | Seconds \n    and adds leading zero if there's only 1 digit */\n    hours = (Math.floor(duration / 3600) % 60).toString().padStart(2, \"0\");\n    minutes = (Math.floor(duration / 60) % 60).toString().padStart(2, \"0\");\n    seconds = Math.floor(duration % 60)\n      .toString()\n      .padStart(2, \"0\");\n\n    /* if duration >= 1H returns also HH otherwise returns only MM:SS */\n    if (duration >= 3600) {\n      return hours + \":\" + minutes + \":\" + seconds;\n    } else {\n      return minutes + \":\" + seconds;\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <Navbar handleClick={handleIndex} activeIndex={activeIndex} />\n\n      <input\n        accept=\"audio/*\"\n        onChange={(e) => {\n          inputOpen(e);\n        }}\n        className=\"openFiles-input\"\n        type=\"file\"\n        multiple\n        ref={openInput_ref}\n      />\n      <input\n        accept=\"audio/*\"\n        onChange={(e) => {\n          inputAdd(e);\n        }}\n        className=\"addFiles-input\"\n        type=\"file\"\n        multiple\n        ref={addInput_ref}\n      />\n\n      <LeftPane index={activeIndex} handleInputs={handleInputsClick} />\n      <RightPane hideUnknownUl={displayHideList} />\n\n      <Playbar\n        isPlaying={isPlaying}\n        previous={previous}\n        next={next}\n        isLooped={isLooped}\n        loopAudio={loopAudio}\n        isShuffled={isShuffled}\n        shuffle={shuffle}\n        isMuted={isMuted}\n        mute={muteAudio}\n      />\n\n      <audio id=\"mainAudio\" className=\"mainAudio\" onEnded={next} loop={isLooped} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/unknown.1fdb9798.png\";"],"sourceRoot":""}