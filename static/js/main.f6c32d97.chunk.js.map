{"version":3,"sources":["components/RightPane.tsx","components/LeftPane.tsx","components/Playbar.tsx","components/Navbar.tsx","App.tsx","serviceWorker.ts","index.tsx","images/unknown.png"],"names":["RightPane","props","className","data-album","onDoubleClick","e","hideUnknownUl","src","unknown","alt","API_SEARCH","API_KEY","API_LYRICS","ContentCollection","id","LeftPane","index","handleInputs","handleDrop","handleDragOver","handleDragLeave","React","useState","isChecked","setIsChecked","searchLyrics","a","currentPlaying","document","querySelector","alert","songTitleEl","getElementsByTagName","artist","getAttribute","songTitle","textContent","encodeURIComponent","trim","fetch","then","response","json","data","success","result","length","firstResult","haslyrics","api_lyrics","lyrics","lyricsText","getElementsByClassName","classList","add","setAttribute","catch","error","map","content","i","key","data-reflection","undefined","onDrop","preventDefault","onDragOver","onDragLeave","onClick","type","checked","onChange","htmlFor","data-lyrics","Playbar","previous","isPlaying","next","isLooped","loopAudio","isShuffled","shuffle","mute","isMuted","LinksCollection","name","Navbar","handleClick","activeIndex","link","songs","playlist","shuffledPlaylist","App","objectUrl","setIndex","setIsPlaying","setIsMuted","setIsLooped","setIsShuffled","isShuffledRef","useRef","openInput_ref","addInput_ref","useEffect","progressBar","lineProgressBar","timestamp","currentTimeEl","play_pause","mainAudio","getElementById","pane_album","album_width_init","offsetWidth","updateProgressBar","convertSeconds","currentTime","percentage","parseFloat","duration","toFixed","style","transform","progressTimestamp","event","x","pageX","totalWidth","this","offsetLeft","display","audioSeconds","setCurrentTime","paused","play","togglePlay","pause","spacebarToggle","keyCode","keyboardPrevNext","ratio","album_width","height","window","addEventListener","removeEventListener","j","Math","floor","random","temp","shufflePlaylist","current","resetApp","rightPaneContent","allAlbumsNotUnknown","querySelectorAll","globalAlbumArt","unknownAudioList","unknownAlbum","firstChild","removeChild","imgElements","audioElements","k","imgSrc","URL","revokeObjectURL","l","oldAudio","forEach","child","backgroundImage","title","currentT","line","playPromise","removeAttribute","setTimeout","clearMainAudio","resetLyrics","addFiles","audioFiles","file","fileType","indexOfLastDot","lastIndexOf","extension","substring","toLowerCase","durationEl","createElement","audioEl","trackEl","titleEl","liEl","createObjectURL","onloadedmetadata","readFileInfo","tagInfo","console","log","fileInfo","trackNb","songAlbum","albumGenre","albumYear","picture","muted","replace","appendChild","handleLiClick","unknownAlbumContainer","remove","indexToAppendUnknown","albumTitle","indexOf","unshift","liElements","push","albumContainer","ulList","songsList","trackNbArray","trackNumbers","sort","indexToAppend","albumIndex","liInCurrentAlbum","insertBefore","splice","albumContainerEl","albumInfoEl","albumImageEl","bandNameEl","albumTitleEl","albumGenreEl","titleDivEl","titleLineEl","albumYearEl","audioUlEl","byteArray","Uint8Array","blob","Blob","albumArtUrl","UnknownImage","displayHideList","Promise","resolve","reject","done","inputOpen","currentTarget","files","isDone","song","concat","songsDOM","globalAlbumEL","indexOfCurrent","previousIndex","playNextOrPrevious","songName","setGlobalAlbumArt","nextIndex","nextPrevAudio","curPlayingEl","nextOrPrevEl","_","load","artistTitle","globalAlbum","albumImg","contains","nodeName","playbarDuration","previousLi","currentAudio","songNameEL","audioList","nextElementSibling","jsmediatags","read","onSuccess","tag","tags","track","toString","match","padStart","album","genre","year","onError","info","hours","minutes","seconds","stopPropagation","DT","dataTransfer","eventName","accept","multiple","ref","inputAdd","click","dropEffect","onEnded","loop","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.f6c32d97.chunk.js","sourcesContent":["import React from \"react\";\r\nimport unknown from \"../images/unknown.png\";\r\n\r\ninterface Props {\r\n  hideUnknownUl: Function;\r\n}\r\n\r\nconst RightPane = (props: Props) => {\r\n  return (\r\n    <div className=\"right-pane\">\r\n      <div className=\"right-pane__content\">\r\n        <div className=\"album unknown hidden\" data-album=\"unknown\">\r\n          <div className=\"album__info\" onDoubleClick={(e) => {props.hideUnknownUl(e)}}>\r\n            <img className=\"album__cover noAlbumCover unknownImg\" src={unknown} alt=\"unknown\" />\r\n\r\n            <div className=\"band__name\">Unknown Albums</div>\r\n\r\n            <div className=\"album__title\">\r\n              <div className=\"title\">Unknown</div> <span className=\"line\"></span>{\" \"}\r\n              <span className=\"album__year\">Unknown</span>\r\n            </div>\r\n\r\n            <span className=\"album__genre\">Unknown</span>\r\n          </div>\r\n\r\n          <ul className=\"audio__list\"></ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RightPane;\r\n","import React from \"react\";\r\n\r\ninterface Content {\r\n  id: string;\r\n}\r\n\r\ninterface Props {\r\n  handleDrop: Function;\r\n  handleDragOver: Function;\r\n  handleDragLeave: Function;\r\n  handleInputs: Function;\r\n  index: number;\r\n}\r\n\r\nconst API_SEARCH = \"https://api.happi.dev/v1/music?q=\";\r\nconst API_KEY = \"a785bdcxq0qLhDRbaymzbBBm3qFQkQ0IZZJyrLCZ5ywg2ZyswhL0fYpp\";\r\nlet API_LYRICS = \"\";\r\n\r\nconst LeftPane = (props: Props) => {\r\n  const { index, handleInputs, handleDrop, handleDragOver, handleDragLeave } = props;\r\n  const [isChecked, setIsChecked] = React.useState(false);\r\n\r\n  /* --------------------------------------------------------- */\r\n  /* --------| search lyrics with fetch on Happi API |-------- */\r\n  /* --------------------------------------------------------- */\r\n  async function searchLyrics() {\r\n    let currentPlaying = document.querySelector(\".nowPlaying\") as HTMLLIElement; // selected / playing song\r\n\r\n    if (!currentPlaying) {\r\n      alert(\"No songs selected or loaded\");\r\n    } else {\r\n      let songTitleEl = currentPlaying.getElementsByTagName(\"div\")[0] as HTMLDivElement; // <div> element from selected / current <li>\r\n\r\n      let artist = songTitleEl.getAttribute(\"data-artist\") as string; // artist from data attribute\r\n      let songTitle = songTitleEl.textContent as string; // song title from HTML\r\n\r\n      /* URL encode and trim string (%20 = spaces etc.) */\r\n      artist = encodeURIComponent(artist.trim());\r\n      songTitle = encodeURIComponent(songTitle.trim());\r\n\r\n      /* Happi API fetch - search query -> API query + artist + song title */\r\n      await fetch(API_SEARCH + artist + \"%20\" + songTitle + \"&apikey=\" + API_KEY)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (data.success && data.result.length > 0) {\r\n            let firstResult = data.result[0]; // gets first song from Array with results\r\n\r\n            /* lyrics might be not avaiable for some songs OR artists */\r\n            if (!firstResult.haslyrics) {\r\n              alert(\"No Lyrics available\");\r\n            } else {\r\n              API_LYRICS = firstResult.api_lyrics; // gets lyrics API only if song has lyrics from result\r\n\r\n              /* second fetch but with lyrics API received from previous fetch */\r\n              fetch(API_LYRICS + \"?apikey=\" + API_KEY)\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                  if (data.success) {\r\n                    let lyrics = data.result.lyrics; // finally gets the lyrics\r\n\r\n                    let lyricsText = document.getElementsByClassName(\"lyrics__text\")[0] as HTMLDivElement; // gets HTML element to display lyrics\r\n                    let lyricsBtn = document.getElementsByClassName(\"lyrics__button\")[0] as HTMLDivElement; // gets button\r\n\r\n                    lyricsBtn.classList.add(\"hide\"); // hides the button\r\n                    lyricsText.classList.add(\"show\"); // shows lyrics HTML element\r\n\r\n                    lyricsText.setAttribute(\"data-lyrics\", \"true\"); // sets data attribute to later check if can reset lyrics TAB\r\n                    lyricsText.textContent = lyrics; // displays lyrics on page\r\n                  }\r\n                })\r\n                .catch((error) => {\r\n                  alert(\"Something went wrong \" + error);\r\n                });\r\n            }\r\n          } else {\r\n            alert(\"No Lyrics available\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          alert(\"Something went wrong \" + error);\r\n        });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"left-pane\">\r\n      <div className=\"left-pane__item\">\r\n        {ContentCollection.map((content, i) => (\r\n          <div\r\n            key={i}\r\n            id={content.id}\r\n            className={i === index ? \"show\" : \"hide\"}\r\n            data-reflection={content.id === \"album\" ? isChecked : undefined}\r\n          >\r\n            {content.id === \"file\" && (\r\n              <div className=\"file__content\">\r\n                <span\r\n                  className=\"drag-files\"\r\n                  onDrop={(e) => {\r\n                    handleDrop(e);\r\n                    e.preventDefault();\r\n                  }}\r\n                  onDragOver={(e) => {\r\n                    handleDragOver(e);\r\n                  }}\r\n                  onDragLeave={(e) => {\r\n                    handleDragLeave(e);\r\n                  }}\r\n                >\r\n                  <i className=\"material-icons size\">save_alt</i>\r\n                  <span>Drop .mp3 files</span>\r\n                </span>\r\n\r\n                <div\r\n                  className=\"open-files\"\r\n                  onClick={(e) => {\r\n                    handleInputs(e);\r\n                  }}\r\n                >\r\n                  <i className=\"material-icons size\">file_copy</i>\r\n                  <div>Open files...</div>\r\n                </div>\r\n\r\n                <div\r\n                  className=\"add-files\"\r\n                  onClick={(e) => {\r\n                    handleInputs(e);\r\n                  }}\r\n                >\r\n                  <i className=\"material-icons size\">add</i>\r\n                  <div>Add files...</div>\r\n                </div>\r\n\r\n                <div className=\"toggle-relfection\">\r\n                  <input\r\n                    className=\"reflection-checkbox\"\r\n                    type=\"checkbox\"\r\n                    id=\"relfection-checkbox\"\r\n                    checked={isChecked}\r\n                    onChange={() => {\r\n                      setIsChecked(!isChecked);\r\n                    }}\r\n                  ></input>\r\n                  <label htmlFor=\"relfection-checkbox\">\r\n                    {isChecked ? \"Disable album reflection\" : \"Enable album reflection\"}\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {content.id === \"album\" && (\r\n              <div className={isChecked ? \"reflection show\" : \"reflection\"}>\r\n                <span className=\"reflection__img\"></span>\r\n                <span className=\"reflection__shadow\"></span>\r\n              </div>\r\n            )}\r\n\r\n            {content.id === \"lyrics\" && (\r\n              <div className=\"lyrics__content\" data-lyrics=\"false\">\r\n                <div className=\"lyrics__text\"></div>\r\n                <div className=\"lyrics__button\" onClick={searchLyrics}>\r\n                  Search lyrics\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport let ContentCollection: Content[] = [{ id: \"file\" }, { id: \"album\" }, { id: \"lyrics\" }];\r\n\r\nexport default LeftPane;\r\n\r\n/*\r\n\r\n{content.id === \"theme\" && <div className=\"theme__content\">Theme</div>}\r\n\r\nconst playlist_btn = React.useRef<HTMLDivElement>(null); // or React.createRef<HTMLUListElement>();\r\n\r\n  const input_container = React.useRef<HTMLDivElement>(null); // div with input\r\n  const playlist_input = React.useRef<HTMLInputElement>(null); // input [new playlist]\r\n\r\n  const ulListRef = React.createRef<HTMLUListElement>(); // ul list element\r\n\r\n  // on click [Create New Playlist] \r\n  function new_playlist(e: MouseEvent) {\r\n    playlist_btn.current!.classList.add(\"hide\"); // hide btn\r\n    input_container.current!.classList.remove(\"hide\"); // show input\r\n\r\n    playlist_input.current!.removeAttribute(\"disabled\"); // make accessible\r\n    playlist_input.current!.focus(); // auto focus after click\r\n  }\r\n\r\n  function reset_input() {\r\n    playlist_btn.current!.classList.remove(\"hide\"); // show btn\r\n    input_container.current!.classList.add(\"hide\"); // hide input\r\n\r\n    playlist_input.current!.setAttribute(\"disabled\", \"\"); // disable input\r\n    playlist_input.current!.value = \"\"; // reset value in input\r\n  }\r\n\r\n  // on key press and if key pressed === Enter \r\n  function addPlaylist(e: KeyboardEvent) {\r\n    if (e.key === \"Enter\" && playlist_input.current!.value.length > 0 && playlist_input.current!.value.trim().length) {\r\n      // if correct value - accept the playlist and create new one \r\n\r\n      const newLi = document.createElement(\"li\"); // create new <li> element\r\n      newLi.textContent = playlist_input.current!.value.trim(); // <li> content = value from input\r\n\r\n      ulListRef.current!.appendChild(newLi); // add created <li> to the <ul>\r\n\r\n      if (ulListRef.current!.classList.contains(\"hide\")) {\r\n        ulListRef.current!.classList.remove(\"hide\"); // shows <ul> element if contains .hide class\r\n      }\r\n\r\n      reset_input();\r\n    } else if (e.key === \"Enter\") {\r\n      // otherwise reset entry \r\n      reset_input();\r\n    }\r\n  }\r\n\r\n{content.id === \"playlists\" && (\r\n              <div className=\"playlists__content\">\r\n                <div\r\n                  ref={playlist_btn}\r\n                  className=\"playlist__btn\"\r\n                  onClick={e => {\r\n                    new_playlist(e);\r\n                  }}\r\n                >\r\n                  <i className=\"material-icons md-48\">add</i>\r\n                  <div>Create new playlist</div>\r\n                </div>\r\n\r\n                <div className=\"playlist__input-container hide\" ref={input_container}>\r\n                  <input\r\n                    disabled\r\n                    maxLength={40}\r\n                    id=\"new-input\"\r\n                    ref={playlist_input}\r\n                    onKeyPress={event => {\r\n                      addPlaylist(event);\r\n                    }}\r\n                    type=\"text\"\r\n                    placeholder=\"Playlist name\"\r\n                  />\r\n                </div>\r\n\r\n                <ul className=\"playlist__ul hide\" ref={ulListRef}></ul>\r\n              </div>\r\n            )}\r\n\r\n*/\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  isPlaying: boolean;\r\n  isLooped: boolean;\r\n  isShuffled: boolean;\r\n  isMuted: boolean;\r\n\r\n  loopAudio: Function;\r\n  shuffle: Function;\r\n  mute: Function;\r\n  previous: Function;\r\n  next: Function;\r\n}\r\n\r\nconst Playbar = (props: Props) => {\r\n  return (\r\n    <div className=\"playbar\">\r\n      <span className=\"timestamp\"></span>\r\n\r\n      <div className=\"playbar__left-controls\">\r\n        <span\r\n          className=\"previous\"\r\n          onClick={(e) => {\r\n            props.previous(e);\r\n          }}\r\n        >\r\n          <i className=\"material-icons md-20\">fast_rewind</i>\r\n        </span>\r\n        <span className=\"play-pause\">\r\n          <i className=\"material-icons md-20\">{props.isPlaying ? \"pause\" : \"play_arrow\"}</i>\r\n        </span>\r\n        <span\r\n          className=\"next\"\r\n          onClick={(e) => {\r\n            props.next(e);\r\n          }}\r\n        >\r\n          <i className=\"material-icons md-20\">fast_forward</i>\r\n        </span>\r\n      </div>\r\n      <div className=\"playbar__progress\">\r\n        <span className=\"current-time\">-- : --</span>\r\n\r\n        <span className=\"progress-bar\">\r\n          <span className=\"line\"></span>\r\n        </span>\r\n\r\n        <span className=\"duration\">-- : --</span>\r\n      </div>\r\n\r\n      {/* repeat, shuffle and volume controls */}\r\n      <div className=\"playbar__right-controls\">\r\n        {/* repeat container */}\r\n        <span\r\n          className={props.isLooped ? \"playbar__repeat selected\" : \"playbar__repeat\"}\r\n          onClick={(e) => {\r\n            props.loopAudio(e);\r\n          }}\r\n        >\r\n          <i className=\"material-icons md-20\">repeat</i>\r\n        </span>\r\n\r\n        {/* shuffle container */}\r\n        <span\r\n          className={props.isShuffled ? \"playbar__shuffle selected\" : \"playbar__shuffle\"}\r\n          onClick={(e) => {\r\n            props.shuffle(e);\r\n          }}\r\n        >\r\n          <i className=\"material-icons md-20\">shuffle</i>\r\n        </span>\r\n\r\n        {/* volume container */}\r\n        <div\r\n          className=\"playbar__volume\"\r\n          onClick={(e) => {\r\n            props.mute(e);\r\n          }}\r\n        >\r\n          <i className=\"material-icons md-20 vol-icon\">{props.isMuted ? \"volume_off\" : \"volume_up\"}</i>\r\n\r\n          <div className=\"volume__wrap\">\r\n            <span className=\"bar\">\r\n              <span className=\"line\"></span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Playbar;\r\n","import React from \"react\";\r\n\r\n/* types for array collection */\r\nexport interface Links {\r\n  name: string;\r\n}\r\n\r\ninterface Props {\r\n  handleClick: any;\r\n  activeIndex: number;\r\n}\r\n\r\nconst Navbar = (props: Props) => {\r\n  const { handleClick, activeIndex } = props;\r\n\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"navbar__container\">\r\n        {LinksCollection.map((link, i) => (\r\n          /* for each element in array returns a div item on navbar */\r\n          <div\r\n            className={activeIndex === i ? \"navbar__item active\" : \"navbar__item\" /* checks if (i === activeIndex) */}\r\n            onClick={() => {\r\n              handleClick(i);\r\n            }}\r\n            key={i}\r\n          >\r\n            {link.name}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"navbar__container\">Playlist</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/* array collection of navbar items */\r\nexport let LinksCollection: Links[] = [\r\n  { name: \"File\" },\r\n  { name: \"Album\" },\r\n  { name: \"Lyrics\" }\r\n];\r\n\r\nexport default Navbar;\r\n","import RightPane from \"./components/RightPane\";\nimport LeftPane from \"./components/LeftPane\";\nimport Playbar from \"./components/Playbar\";\nimport Navbar from \"./components/Navbar\";\n\nimport React, { ChangeEvent } from \"react\";\nimport jsmediatags from \"jsmediatags\";\n\nimport UnknownImage from \"./images/unknown.png\";\nimport \"./sass/app.scss\";\n\n/**\n * TODO : right click context menu - maybe in future add some options like (delete song / <li> etc.)\n * TODO : --> OR when adding files check also for the ARTIST and ALBUM not only ALBUM\n * TODO : --> function to sort albums by ARTIST then by ALBUM on adding files\n *\n * ! Event delegation apparently is discouraged in React. React handles it on its own. So each <li> has an EventListener\n */\n\ninterface fileInfo {\n  trackNb: string;\n  songTitle: string;\n  songAlbum: string;\n  albumGenre: string;\n  albumYear: string;\n  artist: string;\n  picture?: any;\n  type: string;\n}\n\ninterface Songs {\n  albumTitle?: string;\n  liElements?: Array<HTMLLIElement>;\n}\n\n/* needed to be put before const App otherwise with each render will reset the variable */\nlet songs: Array<Songs> = []; // songs array -> Array of objects {\"albumTitle\", [ArrayOfLi]}\nlet playlist: Array<HTMLLIElement> = []; // playlist array -> only <li> elements\nlet shuffledPlaylist: Array<HTMLLIElement> = []; // same as playlist but random songs\n\nexport const App = () => {\n  const [activeIndex, setIndex] = React.useState(0); // initial index set to 0 - File Tab\n  const [isPlaying, setIsPlaying] = React.useState(false); // state to check if audio is playing\n  const [isMuted, setIsMuted] = React.useState(false); // state to check if main audio is muted\n  const [isLooped, setIsLooped] = React.useState(false); // state to check if main audio should repeat the song\n  const [isShuffled, setIsShuffled] = React.useState(false); // state to check if playlist is shuffled\n\n  let isShuffledRef = React.useRef<boolean>();\n  const openInput_ref = React.useRef<HTMLInputElement>(null); // input to open new files\n  const addInput_ref = React.useRef<HTMLInputElement>(null); // input to add files to the playlist\n\n  let objectUrl: string; // variable to store url objects\n\n  /* ------------------------------------------------------ */\n  /* --------| Main useEffect with some functions |-------- */\n  /* ------------------------------------------------------ */\n  React.useEffect(() => {\n    let progressBar = document.getElementsByClassName(\"progress-bar\")[0] as HTMLSpanElement; // progress bar container\n    let lineProgressBar = document.querySelector(\".progress-bar .line\") as HTMLSpanElement; // line that indicates the progress\n    let timestamp = document.getElementsByClassName(\"timestamp\")[0] as HTMLSpanElement; // timestamp with HH:MM:SS / current time\n\n    let currentTimeEl = document.getElementsByClassName(\"current-time\")[0] as HTMLSpanElement; // <span> element with current time\n    let play_pause = document.getElementsByClassName(\"play-pause\")[0] as HTMLSpanElement; // play & pause control\n    let mainAudio = document.getElementById(\"mainAudio\") as HTMLAudioElement; // main <audio> element\n\n    let pane_album = document.getElementById(\"album\") as HTMLDivElement; // main album cover\n    let album_width_init = pane_album.offsetWidth; // initial width value\n\n    pane_album.style.height = `${album_width_init}px`; // initialize height = same as width\n\n    /* ------------------------------------------------------------------------------------ */\n    /* --------| on timeUpdate changes current time <span> and moves progress bar |-------- */\n    /* ------------------------------------------------------------------------------------ */\n    function updateProgressBar() {\n      currentTimeEl.textContent = convertSeconds(mainAudio.currentTime); // converts seconds from current audio time and puts it in DOM\n      let percentage = parseFloat(((mainAudio.currentTime / mainAudio.duration) * 100).toFixed(3)); // (currTime / fullDuration) * 100 = current percentage\n      lineProgressBar.style.transform = `translate3d(${-100.2 + percentage}%, 0, 0)`; // updates and moves the line EL according to the percentage\n    }\n\n    /* ---------------------------------------------------- */\n    /* --------| displays timestamp on mouseEnter |-------- */\n    /* ---------------------------------------------------- */\n    function progressTimestamp(this: HTMLElement, event: MouseEvent) {\n      let x = event.pageX; // gets x coords from left side of the page\n\n      let totalWidth = progressBar.offsetWidth; // width of progress bar\n      let percentage = (x - this.offsetLeft) / totalWidth; // gets percentage from progress bar width on current position\n\n      if (mainAudio.src && mainAudio.duration) {\n        timestamp.style.display = \"flex\";\n        timestamp.style.transform = `translate3d(calc(-50% + ${x}px), 0, 0)`; // -50% to center timestamp + \"x\" px from left\n\n        let audioSeconds = mainAudio.duration * percentage; // gets percentage from full audio duration on current position\n        timestamp.textContent = convertSeconds(audioSeconds); // converts seconds into HH:MM:SS and puts it in <span>\n      }\n    }\n\n    /* ----------------------------------------------------------------- */\n    /* --------| sets currentTime when clicked on progress bar |-------- */\n    /* ----------------------------------------------------------------- */\n    function setCurrentTime(this: HTMLElement, event: MouseEvent) {\n      /* element distance from the left of the page - distance of element from the beginning of the parent \n      IF PARENT HAS RELATIVE POSITION add \"- 100px\" because of that left controls that take 100px of space */\n      let xCord = event.pageX - this.offsetLeft;\n\n      let totalWidth = progressBar.offsetWidth; // width of progress bar\n      let percentage = xCord / totalWidth;\n\n      if (mainAudio.src && mainAudio.duration) {\n        let audioSeconds = mainAudio.duration * percentage; // get current seconds / time from percentage of the full audio duration\n        mainAudio.currentTime = audioSeconds; // sets current time on <audio> element\n\n        if (mainAudio.paused) {\n          setIsPlaying(true);\n          mainAudio.play();\n        }\n      }\n    }\n\n    /* ------------------------------------------------------ */\n    /* --------| Plays or pauses mainAudio on click |-------- */\n    /* ------------------------------------------------------ */\n    function togglePlay() {\n      /* only if mainAudio has loaded data */\n      if (mainAudio.src && mainAudio.duration) {\n        if (isPlaying === false) {\n          setIsPlaying(true);\n          mainAudio.play();\n        } else if (isPlaying === true) {\n          setIsPlaying(false);\n          mainAudio.pause();\n        }\n      }\n    }\n\n    /* --------------------------------------------------------------- */\n    /* --------| Plays or pauses mainAudio on spacebar press |-------- */\n    /* --------------------------------------------------------------- */\n    function spacebarToggle(event: KeyboardEvent) {\n      if (event.keyCode === 32 && mainAudio.src) {\n        event.preventDefault();\n        togglePlay();\n      }\n    }\n\n    /* ---------------------------------------------------------------- */\n    /* --------| Prev Or Next on \"J\" Or \"L\" press on keyboard |-------- */\n    /* ---------------------------------------------------------------- */\n    function keyboardPrevNext(event: KeyboardEvent) {\n      if (mainAudio.src) {\n        switch (event.keyCode) {\n          case 74:\n            event.preventDefault();\n            previous();\n            break;\n\n          case 76:\n            event.preventDefault();\n            next();\n            break;\n        }\n      }\n    }\n\n    /* ----------------------------------------------------------------------------- */\n    /* --------| when mainAudio is / starts playing sets isPlaying to true |-------- */\n    /* ----------------------------------------------------------------------------- */\n    function play() {\n      setIsPlaying(true);\n    }\n\n    /* -------------------------------------------------------------------- */\n    /* --------| when mainAudio is paused sets isPlaying to false |-------- */\n    /* -------------------------------------------------------------------- */\n    function pause() {\n      setIsPlaying(false);\n    }\n\n    /* ---------------------------------------------------- */\n    /* --------| onMouseLeave hides the timestamp |-------- */\n    /* ---------------------------------------------------- */\n    function hideTimestamp() {\n      timestamp.style.display = \"none\";\n    }\n\n    /* -------------------------------------------------- */\n    /* --------| keeps aspect ratio on resizing |-------- */\n    /* -------------------------------------------------- */\n    function ratio() {\n      let album_width = pane_album.offsetWidth; // gets album width\n      pane_album.style.height = `${album_width}px`; // sets height\n    }\n\n    /**\n     * * Adds event listeners on components mount\n     */\n    window.addEventListener(\"keydown\", spacebarToggle);\n    window.addEventListener(\"keydown\", keyboardPrevNext);\n\n    progressBar.addEventListener(\"mousemove\", progressTimestamp);\n    progressBar.addEventListener(\"mouseleave\", hideTimestamp);\n    progressBar.addEventListener(\"click\", setCurrentTime);\n\n    mainAudio.addEventListener(\"timeupdate\", updateProgressBar);\n    mainAudio.addEventListener(\"pause\", pause);\n    mainAudio.addEventListener(\"play\", play);\n\n    play_pause.addEventListener(\"click\", togglePlay);\n    window.addEventListener(\"resize\", ratio);\n\n    /**\n     * * On components unmount - event listeners cleanup\n     */\n    return function cleanupListener() {\n      window.removeEventListener(\"keydown\", spacebarToggle);\n      window.removeEventListener(\"keydown\", keyboardPrevNext);\n\n      progressBar.removeEventListener(\"mousemove\", progressTimestamp);\n      progressBar.removeEventListener(\"mouseleave\", setCurrentTime);\n      progressBar.removeEventListener(\"click\", setCurrentTime);\n\n      mainAudio.removeEventListener(\"timeupdate\", updateProgressBar);\n      mainAudio.removeEventListener(\"pause\", pause);\n      mainAudio.removeEventListener(\"play\", play);\n\n      play_pause.removeEventListener(\"click\", togglePlay);\n      window.removeEventListener(\"resize\", ratio);\n    };\n  });\n\n  /* -------------------------------------------------------------- */\n  /* --------| useEffect only if isShuffled state changes |-------- */\n  /* -------------------------------------------------------------- */\n  React.useEffect(() => {\n    shufflePlaylist();\n\n    isShuffledRef.current = isShuffled;\n\n    /* --------------------------------------------- */\n    /* --------| shuffle playlist function |-------- */\n    /* --------------------------------------------- */\n    function shufflePlaylist() {\n      /* only if state (isShuffled) true */\n      if (isShuffled) {\n        shuffledPlaylist = []; // reset the array\n        // shuffledPlaylist = playlist.slice(0); // copy each element from playlist to shuffledPlaylist\n        shuffledPlaylist = [...playlist];\n\n        /* shuffle the array */\n        for (let i = shuffledPlaylist.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * i);\n          const temp = shuffledPlaylist[i];\n          shuffledPlaylist[i] = shuffledPlaylist[j];\n          shuffledPlaylist[j] = temp;\n        }\n      }\n    }\n  }, [isShuffled]);\n\n  /* -------------------------------------------- */\n  /* --------| simply changes the index |-------- */\n  /* -------------------------------------------- */\n  const handleIndex = (index: number) => {\n    setIndex(index);\n  };\n\n  /* --------------------------------------------------- */\n  /* --------| simulates mouse click on inputs |-------- */\n  /* --------------------------------------------------- */\n  function handleInputsClick(event: React.MouseEvent) {\n    /* checks first which button is clicked then simulates mouse click on input */\n    if (event.currentTarget.classList.contains(\"open-files\") && openInput_ref.current) {\n      openInput_ref.current.click();\n    } else if (event.currentTarget.classList.contains(\"add-files\") && addInput_ref.current) {\n      addInput_ref.current.click();\n    }\n  }\n\n  /* --------------------------------------------- */\n  /* --------| simply changes loop state |-------- */\n  /* --------------------------------------------- */\n  function loopAudio() {\n    setIsLooped(!isLooped);\n  }\n\n  /* ----------------------------------------- */\n  /* --------| changes shuffle state |-------- */\n  /* ----------------------------------------- */\n  function shuffle() {\n    /* only if there are elements in playlist Array */\n    if (playlist.length > 0) {\n      setIsShuffled(!isShuffled);\n    }\n  }\n\n  /* ---------------------------------------------- */\n  /* --------| mutes or unmutes mainAudio |-------- */\n  /* ---------------------------------------------- */\n  function muteAudio() {\n    let mainAudio = document.getElementById(\"mainAudio\") as HTMLAudioElement;\n\n    /* if mainAudio element isn't mute - mutes the audio and changes the state */\n    if (!mainAudio.muted) {\n      mainAudio.muted = true;\n      setIsMuted(true);\n    } else {\n      mainAudio.muted = false;\n      setIsMuted(false);\n    }\n  }\n\n  /* -------------------------------------------------------------- */\n  /* --------| clears src, currentTime, progress bar etc. |-------- */\n  /* -------------------------------------------------------------- */\n  function clearMainAudio() {\n    let mainAudio = document.getElementById(\"mainAudio\") as HTMLAudioElement;\n    let duration = document.getElementsByClassName(\"duration\")[0];\n    let currentT = document.getElementsByClassName(\"current-time\")[0];\n    let line = document.querySelector(\".progress-bar .line\") as HTMLSpanElement;\n\n    setIsShuffled(false); // reset shuffled\n\n    if (mainAudio.src) {\n      let playPromise = mainAudio.play(); // promise returned from play()\n\n      /* proper way to clear audio */\n      if (playPromise !== undefined) {\n        playPromise.then(() => {\n          setIsPlaying(false);\n          mainAudio.pause();\n\n          mainAudio.setAttribute(\"src\", \"\"); // clear src\n          mainAudio.removeAttribute(\"src\"); // remove src attribute completely\n          line.style.transform = \"translate3d(-100.2%, 0, 0)\"; // reset line on progress bar\n\n          /* resets current time and duration text */\n          /* needed to add timeout because mainAudio has\n          eventListener on timeupdate and it isn't sometimes\n          100% done so currentTime text changes to 00:00 */\n          setTimeout(() => {\n            duration.textContent = \"-- : --\";\n            currentT.textContent = \"-- : --\";\n          }, 250);\n        });\n      }\n    }\n  }\n\n  /* --------------------------------------------------------- */\n  /* --------| clears / resets app to default state  |-------- */\n  /* --------------------------------------------------------- */\n  function resetApp() {\n    let rightPaneContent = document.getElementsByClassName(\"right-pane__content\")[0] as HTMLDivElement; // container with all [albums] <div>\n    let allAlbumsNotUnknown = document.querySelectorAll(\".album:not(.unknown)\"); // gets all the albums but not unknown\n    let globalAlbumArt = document.getElementById(\"album\") as HTMLDivElement; // gets main cover art from Album TAB\n\n    let unknownAudioList = document.querySelector(\".album[data-album='unknown'] .audio__list\"); // gets <ul> from unknown album\n    let unknownAlbum = document.querySelector(\".album[data-album='unknown']\"); // gets unknown album\n\n    rightPaneContent.classList.add(\"noTouching\"); // prevent user from clicking too fast when opening new files\n\n    /* removes every DOM <li> from \"unknown\" <ul> */\n    if (unknownAudioList && unknownAlbum) {\n      while (unknownAudioList!.firstChild) {\n        unknownAudioList!.removeChild(unknownAudioList!.firstChild);\n      }\n      unknownAlbum.classList.add(\"hidden\"); // hides the unknown album <div>\n    }\n\n    /* if right pane has already files from previous selection or some magically appear\n       checks if there's any <div> with \"album\" class but not the hidden unknown album */\n    if (allAlbumsNotUnknown.length) {\n      let imgElements = document.querySelectorAll(\".album__cover:not(.unknownImg)\");\n      let audioElements = document.querySelectorAll(\".song__audio\");\n\n      /* releases from memory all URL objects from <img> files src */\n      for (let k = 0; k < imgElements.length; k++) {\n        let imgSrc = imgElements[k] as HTMLImageElement;\n        URL.revokeObjectURL(imgSrc.src);\n      }\n\n      /* releases from memory all URL objects from <audio> files src */\n      for (let l = 0; l < audioElements.length; l++) {\n        let oldAudio = audioElements[l] as HTMLAudioElement;\n        URL.revokeObjectURL(oldAudio.src);\n      }\n    }\n\n    /* removes each album <div> from right pane content */\n    allAlbumsNotUnknown.forEach(function (child) {\n      rightPaneContent.removeChild(child);\n    });\n\n    globalAlbumArt.setAttribute(\"data-cover\", \"false\"); // data attribute for the CSS rules (border, shadows etc.)\n    globalAlbumArt.style.backgroundImage = \"\"; // clears global cover art image\n\n    document.title = \"Music Player\"; // default doc title\n\n    clearMainAudio();\n    resetLyrics();\n\n    songs = []; // clears songs array\n    playlist = []; // clears playlist array\n  }\n\n  /* --------------------------------------------------------------- */\n  /* --------| adds all the info and data from files in DOM|-------- */\n  /* --------------------------------------------------------------- */\n  async function addFiles(audioFiles: FileList): Promise<{ done: boolean }> {\n    let rightPaneContent = document.getElementsByClassName(\"right-pane__content\")[0] as HTMLDivElement; // container with all [albums] <div>\n    // let target = event.currentTarget as HTMLInputElement; // current Input element\n    // let audioFiles = target.files; // files from input\n\n    /* first checks if there's any file */\n    if (!audioFiles || !audioFiles.length) {\n      alert(\"No files selected\");\n    } else {\n      /* for each audio file */\n      for (let i = 0; i < audioFiles.length; i++) {\n        let file = audioFiles[i]; // current iteration file\n        let fileType = file.type; // gets type from each file;\n\n        let indexOfLastDot = file.name.lastIndexOf(\".\"); // last dot to get the extension\n        let extension = file.name.substring(indexOfLastDot).toLowerCase(); // gets only .extension and converts it to lowercase\n\n        /* checks if file is actually an audio file */\n        // if (!(fileType === \"audio/mp3\" || fileType === \"audio/mpeg\")) {\n        if (!(fileType === \"audio/mp3\" || fileType === \"audio/mpeg\") && !(extension === \".mp3\")) {\n          alert(\"Wrong or unsupported file format\");\n        } else {\n          /* creates default elements that will go inside <li> element */\n          const durationEl = document.createElement(\"span\");\n          const audioEl = document.createElement(\"audio\");\n          const trackEl = document.createElement(\"span\");\n          const titleEl = document.createElement(\"div\");\n          const liEl = document.createElement(\"li\");\n\n          /**\n           * ---------------------------------\n           * * Sets className for each element\n           * ---------------------------------\n           */\n\n          durationEl.classList.add(\"song__duration\");\n          audioEl.classList.add(\"song__audio\");\n          titleEl.classList.add(\"song__title\");\n          trackEl.classList.add(\"track-nb\");\n          liEl.classList.add(\"song\");\n\n          // creates blob string for each imported audio file and adds src for each <audio>\n          objectUrl = URL.createObjectURL(file);\n          audioEl.setAttribute(\"src\", objectUrl);\n\n          /* when data (mainly duration) loads from file\n          sets the duration of audio in HTML  */\n          audioEl.onloadedmetadata = function () {\n            durationEl.textContent = convertSeconds(audioEl.duration);\n          };\n\n          /* reads info from media file \n          then returns a promise with all info */\n          let fileInfo = await readFileInfo(file)\n            .then((tagInfo) => {\n              return tagInfo as fileInfo;\n            })\n            .catch((error) => {\n              alert(\"Something went wrong reading the file info\");\n              console.log(error);\n              return error;\n            });\n\n          const { trackNb, songTitle, songAlbum, albumGenre, albumYear, artist, picture, type } = fileInfo;\n\n          audioEl.muted = true; // prevent every single <audio> EL from playing in any way\n          liEl.setAttribute(\"data-track\", trackNb); // sets attribute with track nb on <li>\n          liEl.setAttribute(\"data-album\", songAlbum); // sets attribute with album title on <li>\n          titleEl.setAttribute(\"data-artist\", artist); // sets attribute with artist inside <li> EL\n\n          trackEl.textContent = trackNb + \".\"; // puts track nb in HTML eg. 05. etc\n          titleEl.textContent = songTitle === \"Unknown\" ? `${file.name.replace(/\\.[^/.]+$/, \"\")}` : songTitle; // checks if title isn't unknown\n\n          /**\n           * ------------------------------------\n           * * Appends inside elements to <li> EL\n           * ------------------------------------\n           */\n\n          liEl.appendChild(audioEl); // adds <audio> with src\n          liEl.appendChild(trackEl); // adds <span> with track number\n          liEl.appendChild(titleEl); // adds <div> with title\n          liEl.appendChild(durationEl); // adds <span> with duration\n\n          /* eventListener to handle double click on <li> */\n          liEl.addEventListener(\"dblclick\", handleLiClick);\n\n          /**\n           * * 3 OPTIONS :\n           * ? song album is unknown - adds to the Album with data-album=\"unknown\" and removes .hidden class to display it\n           * ? song album was already added - adds song to the the existing Album with data-album=\"old-album\"\n           * ? song album is a new one - creates new Album <div> with data-album=\"new-album\"\n           */\n\n          /* ------------------------------------ */\n          /* ---| 1st option - Album unknown |--- */\n          /* ------------------------------------ */\n          if (songAlbum === \"Unknown\") {\n            let unknownAlbumContainer = document.querySelector(\".album[data-album='unknown']\"); // selects only unknown <div> album\n            let unknownAudioList = document.querySelector(\".album[data-album='unknown'] .audio__list\"); // selects <ul> inside unknown album\n\n            if (unknownAlbumContainer && unknownAudioList) {\n              unknownAlbumContainer.classList.remove(\"hidden\"); //shows the hidden album <div>\n              unknownAudioList.appendChild(liEl); // appends <li> inside <ul> list\n            }\n\n            /* checks if songs[] has elements inside the array\n            if has elements gets index to append new <li> inside <ul>\n            else just adds new <li> inside <ul> in unknown album <div> */\n            if (songs.length) {\n              /* retrieves indexOf unknown album from songs[] */\n              let indexToAppendUnknown = songs\n                .map((e) => {\n                  return e.albumTitle; // returns each albumTitle from songs[]\n                })\n                .indexOf(\"Unknown\");\n\n              /* conditions to check where to place the <li> EL */\n              if (indexToAppendUnknown === -1) {\n                /* if -1 it means it doesn't exists yet so creates first album object at the beginning of songs[] */\n                songs.unshift({ albumTitle: \"Unknown\", liElements: [liEl] });\n              } else {\n                /* adds new <li> to the songs[] at returned index (where \"Unknown\" album object is located) */\n                let unknownSongs = songs[indexToAppendUnknown].liElements as Array<HTMLLIElement>;\n                unknownSongs.push(liEl);\n              }\n            } else {\n              songs.push({ albumTitle: \"Unknown\", liElements: [liEl] });\n            }\n\n            /* only if album title is NOT undefined */\n          } else if (songAlbum) {\n            /* gets div with same album as the one from current audio file */\n            /* replace function escapes dobule quotes if a album title contains any */\n            let albumContainer = document.querySelector(\n              `.album[data-album=\"${songAlbum.replace(/\\\\([\\s\\S])|(\")/g, \"\\\\$1$2\")}\"]`\n            );\n\n            /* ---------------------------------------------- */\n            /* ---| 2nd option - if Album already exists |--- */\n            /* ---------------------------------------------- */\n            if (albumContainer) {\n              let ulList = albumContainer.getElementsByTagName(\"ul\")[0]; // gets <ul> from selected <div> album\n              let songsList = ulList.getElementsByClassName(\"song\"); // gets every <li> from <ul>\n\n              let trackNbArray = []; // new array which will contain track numbers\n\n              for (let j = 0; j < songsList.length; j++) {\n                let trackNumbers = songsList[j].getAttribute(\"data-track\"); // gets only track number from each <li>\n                trackNbArray.push(trackNumbers); // adds every one of them into array\n              }\n\n              trackNbArray.push(trackNb); // adds current trackNb to the array\n              trackNbArray.sort(); // sorts array of numbers\n\n              let indexToAppend = trackNbArray.indexOf(trackNb); // gets index of the current track nb from the array\n\n              /* gets indexOf current album from songs[] */\n              let albumIndex = songs\n                .map((e) => {\n                  return e.albumTitle; // returns each albumTitle from songs[]\n                })\n                .indexOf(songAlbum);\n\n              let liInCurrentAlbum = songs[albumIndex].liElements; // gets every <li> from album at returned index\n\n              /* conditions to check where should the new <li> be inserted in DOM and added in songs[] */\n              if (indexToAppend === 0 && liInCurrentAlbum) {\n                ulList.insertBefore(liEl, songsList[0]); // appends <li> at the begginning of <ul>\n                liInCurrentAlbum.splice(0, 0, liEl); // adds new <li> at the beggining of songs[]\n              } else if (songsList[indexToAppend] && liInCurrentAlbum) {\n                ulList.insertBefore(liEl, songsList[indexToAppend]); // appends at the returned index\n                liInCurrentAlbum.splice(indexToAppend, 0, liEl); // adds <li> at returned index in songs[]\n              } else {\n                ulList.appendChild(liEl); // appends <li> at the end of the <ul>\n\n                if (liInCurrentAlbum) {\n                  liInCurrentAlbum.push(liEl); // adds <li> at the end of songs[]\n                }\n              }\n            } else {\n              /* ---------------------------------------------- */\n              /* ---| 3rd option - creates new Album <div> |--- */\n              /* ---------------------------------------------- */\n\n              /**\n               * * Create DOM elements\n               */\n\n              const albumContainerEl = document.createElement(\"div\");\n\n              const albumInfoEl = document.createElement(\"div\");\n\n              const albumImageEl = document.createElement(\"img\");\n              const bandNameEl = document.createElement(\"div\");\n              const albumTitleEl = document.createElement(\"div\");\n              const albumGenreEl = document.createElement(\"span\");\n\n              const titleDivEl = document.createElement(\"div\");\n              const titleLineEl = document.createElement(\"span\");\n              const albumYearEl = document.createElement(\"span\");\n\n              const audioUlEl = document.createElement(\"ul\");\n\n              /**\n               * * Set classes\n               */\n\n              albumContainerEl.classList.add(\"album\");\n              albumInfoEl.classList.add(\"album__info\");\n              albumImageEl.classList.add(\"album__cover\");\n              bandNameEl.classList.add(\"band__name\");\n              albumTitleEl.classList.add(\"album__title\");\n              albumGenreEl.classList.add(\"album__genre\");\n              titleDivEl.classList.add(\"title\");\n              titleLineEl.classList.add(\"line\");\n              albumYearEl.classList.add(\"album__year\");\n              audioUlEl.classList.add(\"audio__list\");\n\n              /**\n               * * Set attributes and data\n               */\n\n              /* check for album cover / art */\n              /* picture.data returns an array of data */\n              if (picture) {\n                const byteArray = new Uint8Array(picture.data); // creates 8-bit array\n                const blob = new Blob([byteArray], { type }); // creates new blob object from previous array and type of the file\n                const albumArtUrl = URL.createObjectURL(blob); // finally creates an URL object -> src for img\n                albumImageEl.src = albumArtUrl; // sets image src for current album\n              } else {\n                albumImageEl.classList.add(\"noAlbumCover\"); // class for CSS rules (no border or shadow etc.)\n                albumImageEl.src = UnknownImage; // sets default image as album cover for current album\n              }\n\n              albumContainerEl.setAttribute(\"data-album\", songAlbum);\n              albumContainerEl.setAttribute(\"data-artist\", artist);\n\n              bandNameEl.textContent = artist;\n              titleDivEl.textContent = songAlbum;\n              albumYearEl.textContent = albumYear;\n              albumGenreEl.textContent = albumGenre;\n\n              /* eventListener to hide OR show <ul> and <li> elements */\n              albumInfoEl.addEventListener(\"dblclick\", displayHideList);\n\n              /**\n               * * Append elements\n               */\n\n              rightPaneContent.appendChild(albumContainerEl);\n              albumContainerEl.appendChild(albumInfoEl);\n\n              albumInfoEl.appendChild(albumImageEl);\n              albumInfoEl.appendChild(bandNameEl);\n              albumInfoEl.appendChild(albumTitleEl);\n\n              albumTitleEl.appendChild(titleDivEl);\n              albumTitleEl.appendChild(titleLineEl);\n              albumTitleEl.appendChild(albumYearEl);\n\n              albumInfoEl.appendChild(albumGenreEl);\n              albumContainerEl.appendChild(audioUlEl);\n              audioUlEl.appendChild(liEl);\n\n              /* add to the array of LiElements in songs[] */\n              songs.push({ albumTitle: songAlbum, liElements: [liEl] });\n            }\n          } else {\n            alert(\"Something went wrong\");\n            console.log(\"Error in addFiles()\");\n          }\n        }\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      resolve({ done: true });\n      reject({ error: \"Something went wrong\" });\n    });\n  }\n\n  /* --------------------------------------------------------- */\n  /* --------| Fires when clicked on [Open files...] |-------- */\n  /* --------------------------------------------------------- */\n  async function inputOpen(event: ChangeEvent) {\n    resetApp();\n\n    let current = event.currentTarget as HTMLInputElement;\n    let audioFiles = current.files as FileList;\n\n    /* waits for addFiles() to be done */\n    await addFiles(audioFiles)\n      .then((isDone) => {\n        if (isDone) {\n          /* when Promise resolved and addFiles() is done\n          removes class added in addFiles() that \n          prevents user to click any <li> before it's fully executed */\n          let rightPaneContent = document.querySelector(\".right-pane__content\") as HTMLDivElement;\n          rightPaneContent.classList.remove(\"noTouching\");\n\n          /* gets every <li> element from songs[] (and only <li>)\n          and puts them in playlist[] in same order as in [Songs] */\n          songs.forEach(function (song) {\n            playlist = playlist.concat(...(song.liElements as Array<HTMLLIElement>));\n          });\n        }\n      })\n      .catch((error) => {\n        alert(\"Something went wrong \" + error);\n        console.log(error);\n      });\n  }\n\n  /* -------------------------------------------------------- */\n  /* --------| Fires when clicked on [Add files...] |-------- */\n  /* -------------------------------------------------------- */\n  async function inputAdd(event: ChangeEvent) {\n    let songsDOM = document.querySelectorAll(\".song\"); // gets every <li class=\"song\">\n    let current = event.currentTarget as HTMLInputElement;\n    let audioFiles = current.files as FileList;\n\n    /* if there's no songs in DOM - will execute as if user clicked on [Open files...]\n       otherwise executes addFiles() and waits for it to be done */\n    if (!songsDOM.length) {\n      inputOpen(event);\n    } else {\n      await addFiles(audioFiles)\n        .then((isDone) => {\n          if (isDone) {\n            playlist = []; // reset playlist because all elements from songs[] will be copied\n\n            /* adds new <li> elements from songs[] \n            and puts them in playlist[] - simply copy */\n            songs.forEach(function (song) {\n              playlist = playlist.concat(...(song.liElements as Array<HTMLLIElement>));\n            });\n\n            /* re-shuffle playlist if isShuffled was enabled */\n            if (isShuffledRef.current) {\n              setIsShuffled(false);\n              setIsShuffled(true);\n            }\n          }\n        })\n        .catch((error) => {\n          alert(\"Something went wrong \" + error);\n          console.log(error);\n        });\n    }\n  }\n\n  /* ----------------------------------------------------- */\n  /* --------| Play Previous audio from playlist |-------- */\n  /* ----------------------------------------------------- */\n  function previous() {\n    let mainAudio = document.getElementById(\"mainAudio\") as HTMLAudioElement; // main <audio>\n\n    /* if playlist contains audios and any song is already loaded */\n    if (playlist.length > 1 && mainAudio.src) {\n      let currentPlaying = document.querySelector(\".nowPlaying\") as HTMLLIElement; // current song that was/is selected\n      let globalAlbumEL = document.getElementById(\"album\") as HTMLDivElement;\n\n      resetLyrics();\n\n      /* when user chooses to enable the shuffle option\n      shuffledPlaylist is selected instead of playlist */\n      if (isShuffledRef.current) {\n        let indexOfCurrent = shuffledPlaylist.indexOf(currentPlaying);\n\n        /* if reaches beginning of the playlist plays the last audio\n         otherwise plays previous audio from the playlist */\n        if (indexOfCurrent === 0) {\n          let previousIndex = shuffledPlaylist[shuffledPlaylist.length - 1];\n          let previousAudio = previousIndex.getElementsByTagName(\"audio\")[0];\n\n          playNextOrPrevious(mainAudio, previousAudio, currentPlaying, previousIndex);\n\n          let songName = previousIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = previousIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        } else {\n          let previousIndex = shuffledPlaylist[indexOfCurrent - 1];\n          let previousAUdio = previousIndex.getElementsByTagName(\"audio\")[0];\n\n          playNextOrPrevious(mainAudio, previousAUdio, currentPlaying, previousIndex);\n\n          let songName = previousIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = previousIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        }\n      } else {\n        /* default playlist - no shuffle enabled */\n        let indexOfCurrent = playlist.indexOf(currentPlaying); // get index of current audio in the playlist\n\n        /* if reaches beginning of the playlist plays the last audio\n         otherwise plays previous audio from the playlist */\n        if (indexOfCurrent === 0) {\n          let previousIndex = playlist[playlist.length - 1];\n          let previousAudio = previousIndex.getElementsByTagName(\"audio\")[0];\n\n          playNextOrPrevious(mainAudio, previousAudio, currentPlaying, previousIndex);\n\n          let songName = previousIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = previousIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        } else {\n          let previousIndex = playlist[indexOfCurrent - 1]; // gets previous index (current - 1) element\n          let previousAudio = previousIndex.getElementsByTagName(\"audio\")[0]; // retrieves previous audio from playlist\n\n          playNextOrPrevious(mainAudio, previousAudio, currentPlaying, previousIndex);\n\n          let songName = previousIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = previousIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        }\n      }\n    }\n  }\n\n  /* ------------------------------------------------- */\n  /* --------| Play Next audio from playlist |-------- */\n  /* ------------------------------------------------- */\n  function next() {\n    let mainAudio = document.getElementById(\"mainAudio\") as HTMLAudioElement; // main <audio>\n\n    /* if playlist contains audios and any song is already loaded */\n    if (playlist.length > 1 && mainAudio.src) {\n      let currentPlaying = document.querySelector(\".nowPlaying\") as HTMLLIElement; // current song that was/is selected\n      let globalAlbumEL = document.getElementById(\"album\") as HTMLDivElement;\n\n      resetLyrics();\n\n      /* when user chooses to enable the shuffle option\n      shuffledPlaylist is selected instead of playlist */\n      if (isShuffledRef.current) {\n        let indexOfCurrent = shuffledPlaylist.indexOf(currentPlaying); // get index of current audio in the shuffledPlaylist\n\n        /* if reaches end of the shuffledPlaylist plays the first audio\n         otherwise plays next audio from the shuffledPlaylist */\n        if (indexOfCurrent === shuffledPlaylist.length - 1) {\n          let nextIndex = shuffledPlaylist[0];\n          let nextAudio = nextIndex.getElementsByTagName(\"audio\")[0];\n\n          playNextOrPrevious(mainAudio, nextAudio, currentPlaying, nextIndex);\n\n          let songName = nextIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = nextIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        } else {\n          let nextIndex = shuffledPlaylist[indexOfCurrent + 1]; // gets next index (current + 1) element\n          let nextAudio = nextIndex.getElementsByTagName(\"audio\")[0]; // retrieves next audio from shuffledPlaylist\n\n          playNextOrPrevious(mainAudio, nextAudio, currentPlaying, nextIndex);\n\n          let songName = nextIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = nextIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        }\n      } else {\n        /* default playlist - no shuffle enabled */\n        let indexOfCurrent = playlist.indexOf(currentPlaying); // get index of current audio in the playlist\n\n        /* if reaches end of the playlist plays the first audio\n         otherwise plays next audio from the playlist */\n        if (indexOfCurrent === playlist.length - 1) {\n          let nextIndex = playlist[0];\n          let nextAudio = nextIndex.getElementsByTagName(\"audio\")[0];\n\n          playNextOrPrevious(mainAudio, nextAudio, currentPlaying, nextIndex);\n\n          let songName = nextIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = nextIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        } else {\n          let nextIndex = playlist[indexOfCurrent + 1]; // gets next index (current + 1) element\n          let nextAudio = nextIndex.getElementsByTagName(\"audio\")[0]; // retrieves next audio from playlist\n\n          playNextOrPrevious(mainAudio, nextAudio, currentPlaying, nextIndex);\n\n          let songName = nextIndex.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n          let albumTitle = nextIndex.getAttribute(\"data-album\") as string; // gets albumTitle from data attribute\n          let artist = songName.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n          setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n          document.title = artist + \" - \" + songName.textContent;\n        }\n      }\n    }\n  }\n\n  /* ----------------------------------------------------------- */\n  /* --------| Checks if prev/next audio can be played |-------- */\n  /* -----------| and loads media then plays audio |------------ */\n  /* ----------------------------------------------------------- */\n  function playNextOrPrevious(\n    mainAudio: HTMLAudioElement,\n    nextPrevAudio: HTMLAudioElement,\n    curPlayingEl: HTMLLIElement,\n    nextOrPrevEl: HTMLLIElement\n  ) {\n    /* since play() returns a promise - first checks if promise isn't undefined so it can load media\n       then checks again if it can actually play the loaded src */\n    let playPromise = mainAudio.play();\n    if (playPromise !== undefined) {\n      playPromise\n        .then((_) => {\n          let playbarDuration = document.getElementsByClassName(\"duration\")[0]; // duration element in the App\n          /* update audio duration for prev/next \n             update audio src from prev/next and load it */\n          playbarDuration.textContent = convertSeconds(nextPrevAudio.duration);\n          mainAudio.src = nextPrevAudio.src;\n          mainAudio.load();\n\n          /* remove indicator from current playing and add to the prev/next */\n          curPlayingEl.classList.remove(\"nowPlaying\");\n          nextOrPrevEl.classList.add(\"nowPlaying\");\n\n          if (playPromise !== undefined) {\n            playPromise\n              .then((_) => {\n                mainAudio.play();\n              })\n              .catch((error) => {\n                alert(\"Something went wrong \" + error);\n                console.log(error);\n              });\n          }\n        })\n        .catch((error) => {\n          alert(\"Something went wrong \" + error);\n          console.log(error);\n        });\n    }\n  }\n\n  /* --------------------------------------------------------------------- */\n  /* --------| changes the global artwork on Click | Prev | Next |-------- */\n  /* --------------------------------------------------------------------- */\n  function setGlobalAlbumArt(albumTitle: string, artistTitle: string, globalAlbum: HTMLDivElement) {\n    if (albumTitle === \"Unknown\") {\n      globalAlbum.style.backgroundImage = `url(${UnknownImage})`; // default image\n      globalAlbum.setAttribute(\"data-cover\", \"false\"); // data to tell if there is album art so the borders AND reflection should appear if is enabled\n    } else {\n      let albumEL = document.querySelector(\n        `.album[data-album=\"${albumTitle.replace(/\\\\([\\s\\S])|(\")/g, \"\\\\$1$2\")}\"][data-artist=\"${artistTitle.replace(\n          /\\\\([\\s\\S])|(\")/g,\n          \"\\\\$1$2\"\n        )}\"]`\n      ) as HTMLDivElement; // gets album from rightPane with same AlbumTitle and AlbumArtist + escape double quotes\n      let albumImg = albumEL.getElementsByTagName(\"img\")[0] as HTMLImageElement; // gets the <img> inside ALBUM <div>\n\n      let imgSrc = albumImg.src; // get the src from <img> inside ALBUM <div> element\n\n      globalAlbum.style.backgroundImage = `url(${imgSrc})`; // replaces the global art work with current\n\n      /* condition to tell if data attribute should be set to TRUE of FALSE\n      if ALBUM <img> has no cover art doesn't set the borders otherwise\n      if it has cover art sets data attribute to true and border is displayed */\n      if (albumImg.classList.contains(\"noAlbumCover\")) {\n        globalAlbum.setAttribute(\"data-cover\", \"false\");\n      } else {\n        globalAlbum.setAttribute(\"data-cover\", \"true\");\n      }\n    }\n  }\n\n  /* ------------------------------------------------------ */\n  /* --------| resets lyrics from previous search |-------- */\n  /* ------------------------------------------------------ */\n  function resetLyrics() {\n    let lyricsText = document.getElementsByClassName(\"lyrics__text\")[0]; // lyrics text for specific song\n    let lyricsAttr = lyricsText.getAttribute(\"data-lyrics\"); // gets data attribute to check if <div> has lyrics text\n\n    /* if <div> text has already lyrics from previous search */\n    if (lyricsAttr === \"true\") {\n      let lyricsBtn = document.getElementsByClassName(\"lyrics__button\")[0] as HTMLDivElement; // gets button\n\n      lyricsBtn.classList.remove(\"hide\"); // displays button again\n      lyricsText.textContent = \"\"; // removes previous lyrics\n      lyricsText.classList.remove(\"show\"); // hides lyrics__text <div>\n    }\n  }\n\n  /* ------------------------------------------------------------- */\n  /* --------| Plays selected audio from <li> on dbClick |-------- */\n  /* ------------------------------------------------------------- */\n  async function handleLiClick(event: MouseEvent) {\n    let currentTarget = event.currentTarget as HTMLLIElement; // currentTarget so only <li> no child elements\n\n    resetLyrics();\n\n    /* re-shuffle playlist if isShuffled was enabled */\n    if (isShuffledRef.current) {\n      setIsShuffled(false);\n      setIsShuffled(true);\n    }\n\n    /* only fires when <li> is dbClicked */\n    if (currentTarget && currentTarget.nodeName === \"LI\") {\n      let mainAudio = document.getElementById(\"mainAudio\") as HTMLAudioElement; // gets main <audio>\n      let playbarDuration = document.getElementsByClassName(\"duration\")[0]; // gets duration element\n      let previousLi = document.querySelector(\".nowPlaying\"); // gets previous playing song if exists\n\n      let currentAudio = currentTarget.getElementsByTagName(\"audio\")[0]; // gets <audio> from selected <li> element\n      let songNameEL = currentTarget.getElementsByClassName(\"song__title\")[0]; // gets <div> with song name\n      let artist = songNameEL.getAttribute(\"data-artist\") as string; // gets artist name from data attribute\n\n      let albumTitle = currentTarget.getAttribute(\"data-album\") as string; // get album title from data attribute\n      let globalAlbumEL = document.getElementById(\"album\") as HTMLDivElement;\n\n      mainAudio.src = currentAudio.src; // gets src from selected audio\n      mainAudio.load(); // loads the audio\n\n      let playPromise = mainAudio.play();\n\n      /* checks if promise isn't undefined after new src load and then plays audio */\n      if (playPromise !== undefined) {\n        playPromise\n          .then(() => {\n            mainAudio.play();\n            setIsPlaying(true);\n          })\n          .catch((error) => {\n            alert(\"Can't play this song\");\n          });\n      }\n\n      /* removes indicator from previous <li> selection if there is any */\n      if (previousLi) {\n        previousLi.classList.remove(\"nowPlaying\");\n      }\n\n      playbarDuration.textContent = convertSeconds(currentAudio.duration); // sets current duration in DOM\n      currentTarget.classList.add(\"nowPlaying\"); // adds indicator on current <li>\n\n      setGlobalAlbumArt(albumTitle, artist, globalAlbumEL);\n\n      document.title = artist + \" - \" + songNameEL.textContent; // sets the title of document to the current song\n    }\n  }\n\n  /* -------------------------------------------------- */\n  /* --------| Hides or shows <ul> on dbClick |-------- */\n  /* -------------------------------------------------- */\n  function displayHideList(event: MouseEvent) {\n    let currentTarget = event.currentTarget as HTMLDivElement; // <div class=\"album__info\">\n    let audioList = currentTarget.nextElementSibling; // <ul> is the next sibling element\n\n    /* toggle class to Hide | Show <ul> */\n    if (audioList) {\n      if (audioList.classList.contains(\"hidden\")) {\n        audioList.classList.remove(\"hidden\");\n      } else {\n        audioList.classList.add(\"hidden\");\n      }\n    }\n  }\n\n  /* -------------------------------------------------------------------------- */\n  /* --------| Reads info from media file (track, artist, album etc.) |-------- */\n  /* -------------------------------------------------------------------------- */\n  function readFileInfo(file: File) {\n    return new Promise((resolve, reject) => {\n      jsmediatags.read(file, {\n        onSuccess: function (tag) {\n          let type = tag.type;\n          let tags = tag.tags;\n\n          /* checks for every info if exists otherwise sets it to \"Unknown\" */\n          /* if track number is undefined sets track number as 01 insted\n          otherwise takes only track number before \"/\" if there's any slash\n          and if string has only 1 digit then adds leading zero */\n          /* picture's type isn't a string so if it's undefined \n          it will be replaced later by default image */\n          let trackNb = tags.track ? `${tags.track.toString().match(/[^/]+/)}`.padStart(2, \"0\") : \"01\";\n          let songTitle = tags.title ? `${tags.title}` : \"Unknown\";\n          let songAlbum = tags.album ? `${tags.album}` : \"Unknown\";\n          let albumGenre = tags.genre ? `${tags.genre}` : \"Unknown\";\n          let albumYear = tags.year ? `${tags.year}` : \"Unknown\";\n          let artist = tags.artist ? `${tags.artist}` : \"Unknown\";\n          let picture = tags.picture;\n\n          /* creates fileInfo object */\n          let mediaInfo: fileInfo = {\n            trackNb: trackNb,\n            songTitle: songTitle,\n            songAlbum: songAlbum,\n            albumGenre: albumGenre,\n            albumYear: albumYear,\n            artist: artist,\n            picture: picture,\n            type: type,\n          };\n\n          /* onSucces returns object with info from media file */\n          resolve(mediaInfo);\n        },\n        onError: function (error) {\n          reject(\"Error in JSMediaTags \\nError info: \" + error.info + \"\\nError type: \" + error.type);\n        },\n      });\n    });\n  }\n\n  /* -------------------------------------------------------------- */\n  /* --------| Returns duration in sec in HH:MM:SS format |-------- */\n  /* -------------------------------------------------------------- */\n  function convertSeconds(duration: number) {\n    let hours, minutes, seconds;\n\n    /* converts duration into Hours | Minutes | Seconds \n    and adds leading zero if there's only 1 digit */\n    hours = (Math.floor(duration / 3600) % 60).toString().padStart(2, \"0\");\n    minutes = (Math.floor(duration / 60) % 60).toString().padStart(2, \"0\");\n    seconds = Math.floor(duration % 60)\n      .toString()\n      .padStart(2, \"0\");\n\n    /* if duration >= 1H returns also HH otherwise returns only MM:SS */\n    if (duration >= 3600) {\n      return hours + \":\" + minutes + \":\" + seconds;\n    } else {\n      return minutes + \":\" + seconds;\n    }\n  }\n\n  /* ----------------------------------------- */\n  /* --------| handles files on drop |-------- */\n  /* ----------------------------------------- */\n  async function handleDrop(event: DragEvent) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    let current = event.currentTarget as HTMLSpanElement;\n    let DT = event.dataTransfer as DataTransfer;\n    let files = DT.files as FileList;\n\n    current.classList.remove(\"highlight\");\n\n    await addFiles(files).then((isDone) => {\n      if (isDone) {\n        playlist = []; // reset playlist because all <li> elements from songs[] will be copied\n\n        /* adds new <li> elements from songs[] \n        and puts them in playlist[] - simply copy */\n        songs.forEach(function (song) {\n          playlist = playlist.concat(...(song.liElements as Array<HTMLLIElement>));\n        });\n\n        /* re-shuffle playlist if isShuffled was enabled */\n        if (isShuffledRef.current) {\n          setIsShuffled(false);\n          setIsShuffled(true);\n        }\n      }\n    });\n  }\n\n  /* ----------------------------------------------------------- */\n  /* --------| handles visual on dragging over the box |-------- */\n  /* ----------------------------------------------------------- */\n  function handleDragOver(event: DragEvent) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    let DT = event.dataTransfer as DataTransfer;\n    DT.dropEffect = \"copy\"; // Copy \"icon\" instead of Move\n\n    let current = event.currentTarget as HTMLSpanElement;\n    current.classList.add(\"highlight\");\n  }\n\n  /* ---------------------------------------------------- */\n  /* --------| handles visual on leaving the box|-------- */\n  /* ---------------------------------------------------- */\n  function handleDragLeave(event: DragEvent) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    let current = event.currentTarget as HTMLSpanElement;\n    current.classList.remove(\"highlight\");\n  }\n\n  /* Prevents all drag events on App */\n  [\"drop\", \"dragover\", \"dragenter\", \"dragleave\"].forEach((eventName) => {\n    document.addEventListener(eventName, preventsDefaults, false);\n\n    function preventsDefaults(e: Event) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  });\n\n  return (\n    <div className=\"app\">\n      <Navbar handleClick={handleIndex} activeIndex={activeIndex} />\n\n      <input\n        accept=\"audio/*\"\n        onChange={(e) => {\n          inputOpen(e);\n        }}\n        className=\"openFiles-input\"\n        type=\"file\"\n        multiple\n        ref={openInput_ref}\n      />\n      <input\n        accept=\"audio/*\"\n        onChange={(e) => {\n          inputAdd(e);\n        }}\n        className=\"addFiles-input\"\n        type=\"file\"\n        multiple\n        ref={addInput_ref}\n      />\n\n      <LeftPane\n        index={activeIndex}\n        handleInputs={handleInputsClick}\n        handleDrop={handleDrop}\n        handleDragOver={handleDragOver}\n        handleDragLeave={handleDragLeave}\n      />\n      <RightPane hideUnknownUl={displayHideList} />\n\n      <Playbar\n        isPlaying={isPlaying}\n        previous={previous}\n        next={next}\n        isLooped={isLooped}\n        loopAudio={loopAudio}\n        isShuffled={isShuffled}\n        shuffle={shuffle}\n        isMuted={isMuted}\n        mute={muteAudio}\n      />\n\n      <audio id=\"mainAudio\" className=\"mainAudio\" onEnded={next} loop={isLooped} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/unknown.1fdb9798.png\";"],"sourceRoot":""}